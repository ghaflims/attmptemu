;
; File generated by cc65 v 2.16 - Ubuntu 2.16-2
;
	.fopt		compiler,"cc65 v 2.16 - Ubuntu 2.16-2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_music_play
	.import		_sfx_play
	.import		_pad_poll
	.import		_split
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_write
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_clear_vram_buffer
	.import		_get_pad_new
	.import		_set_music_speed
	.import		_set_scroll_x
	.import		_set_scroll_y
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update_nmi
	.export		_RoundSprL
	.export		_RoundSprR
	.export		_sprid
	.export		_pad1
	.export		_pad1_new
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_direction
	.export		_address
	.export		_x
	.export		_y
	.export		_nt
	.export		_index
	.export		_room
	.export		_map
	.export		_scroll_x
	.export		_scroll_y
	.export		_scroll_count
	.export		_pseudo_scroll_x
	.export		_L_R_switch
	.export		_old_x
	.export		_song
	.export		_c_map
	.export		_c_map2
	.export		_Generic
	.export		_BoxGuy1
	.export		_palette_bg
	.export		_palette_sp
	.export		_metatiles1
	.export		_is_solid
	.export		_Room1
	.export		_Room2
	.export		_Room3
	.export		_Room4
	.export		_Room5
	.export		_Rooms
	.export		_text
	.export		_load_room
	.export		_draw_sprites
	.export		_movement
	.export		_bg_collision
	.export		_draw_screen_R
	.export		_new_cmap
	.export		_bg_collision_sub
	.export		_bg_check_low
	.export		_change_song
	.export		_check_sfx
	.export		_set_sprite_zero
	.export		_debug
	.export		_main

.segment	"DATA"

_BoxGuy1:
	.word	$4000
	.word	$C400
	.res	4,$00

.segment	"RODATA"

_RoundSprL:
	.byte	$FF
	.byte	$FC
	.byte	$02
	.byte	$00
	.byte	$07
	.byte	$FC
	.byte	$03
	.byte	$00
	.byte	$FF
	.byte	$04
	.byte	$12
	.byte	$00
	.byte	$07
	.byte	$04
	.byte	$13
	.byte	$00
	.byte	$80
_RoundSprR:
	.byte	$FF
	.byte	$FC
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$FC
	.byte	$01
	.byte	$00
	.byte	$FF
	.byte	$04
	.byte	$10
	.byte	$00
	.byte	$07
	.byte	$04
	.byte	$11
	.byte	$00
	.byte	$80
_palette_bg:
	.byte	$22
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$39
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$0A
	.byte	$1A
	.byte	$2A
_palette_sp:
	.byte	$22
	.byte	$01
	.byte	$11
	.byte	$10
	.byte	$22
	.byte	$17
	.byte	$28
	.byte	$38
	.byte	$22
	.byte	$05
	.byte	$15
	.byte	$35
	.byte	$22
	.byte	$0F
	.byte	$00
	.byte	$22
_metatiles1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$15
	.byte	$16
	.byte	$01
	.byte	$06
	.byte	$06
	.byte	$16
	.byte	$16
	.byte	$01
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
	.byte	$01
	.byte	$15
	.byte	$16
	.byte	$15
	.byte	$16
	.byte	$01
	.byte	$16
	.byte	$16
	.byte	$16
	.byte	$16
	.byte	$01
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$01
	.byte	$08
	.byte	$09
	.byte	$18
	.byte	$19
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$19
	.byte	$19
	.byte	$01
	.byte	$09
	.byte	$0A
	.byte	$19
	.byte	$1A
	.byte	$01
_is_solid:
	.byte	$00
	.byte	$80
	.byte	$C0
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_Room1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Room2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Room3:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$06
	.byte	$07
	.byte	$02
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Room4:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$02
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Room5:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Rooms:
	.addr	_Room1
	.addr	_Room2
	.addr	_Room3
	.addr	_Room4
	.addr	_Room5
_text:
	.byte	$43,$4F,$49,$4E,$53,$3A,$30,$30,$20,$20,$4C,$49,$56,$45,$53,$3A
	.byte	$30,$20,$20,$4C,$45,$56,$45,$4C,$3A,$30,$00

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_sprid:
	.res	1,$00
.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
.segment	"ZEROPAGE"
_pad1_new:
	.res	1,$00
.segment	"ZEROPAGE"
_collision:
	.res	1,$00
.segment	"ZEROPAGE"
_collision_L:
	.res	1,$00
.segment	"ZEROPAGE"
_collision_R:
	.res	1,$00
.segment	"ZEROPAGE"
_collision_U:
	.res	1,$00
.segment	"ZEROPAGE"
_collision_D:
	.res	1,$00
.segment	"ZEROPAGE"
_coordinates:
	.res	1,$00
.segment	"ZEROPAGE"
_temp1:
	.res	1,$00
.segment	"ZEROPAGE"
_temp2:
	.res	1,$00
.segment	"ZEROPAGE"
_temp3:
	.res	1,$00
.segment	"ZEROPAGE"
_temp4:
	.res	1,$00
.segment	"ZEROPAGE"
_temp5:
	.res	2,$00
.segment	"ZEROPAGE"
_temp6:
	.res	2,$00
.segment	"ZEROPAGE"
_eject_L:
	.res	1,$00
.segment	"ZEROPAGE"
_eject_R:
	.res	1,$00
.segment	"ZEROPAGE"
_eject_D:
	.res	1,$00
.segment	"ZEROPAGE"
_eject_U:
	.res	1,$00
.segment	"ZEROPAGE"
_direction:
	.res	1,$00
.segment	"ZEROPAGE"
_address:
	.res	2,$00
.segment	"ZEROPAGE"
_x:
	.res	1,$00
.segment	"ZEROPAGE"
_y:
	.res	1,$00
.segment	"ZEROPAGE"
_nt:
	.res	1,$00
.segment	"ZEROPAGE"
_index:
	.res	1,$00
.segment	"ZEROPAGE"
_room:
	.res	1,$00
.segment	"ZEROPAGE"
_map:
	.res	1,$00
.segment	"ZEROPAGE"
_scroll_x:
	.res	2,$00
.segment	"ZEROPAGE"
_scroll_y:
	.res	2,$00
.segment	"ZEROPAGE"
_scroll_count:
	.res	1,$00
.segment	"ZEROPAGE"
_pseudo_scroll_x:
	.res	2,$00
.segment	"ZEROPAGE"
_L_R_switch:
	.res	1,$00
.segment	"ZEROPAGE"
_old_x:
	.res	2,$00
.segment	"ZEROPAGE"
_song:
	.res	1,$00
.segment	"BSS"
_c_map:
	.res	240,$00
.segment	"BSS"
_c_map2:
	.res	240,$00
.segment	"BSS"
_Generic:
	.res	4,$00
.segment	"BSS"
_debug:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; debug = 0xba;
;
	lda     #$BA                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:BA X:XX Y:XX
	sta     _debug               ; USE: __A________  CHG: ___________  SIZE: 3    In A:BA X:XX Y:XX  Out A:BA X:XX Y:XX
;
; vram_adr(NTADR_A(3,2));
;
	ldx     #$20                 ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:BA X:XX Y:XX  Out A:BA X:20 Y:XX
	lda     #$43                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:BA X:20 Y:XX  Out A:43 X:20 Y:XX
	jsr     _vram_adr            ; USE: __AX_______  CHG: HLAXYT112VS  SIZE: 3    In A:43 X:20 Y:XX  Out A:XX X:XX Y:XX
;
; vram_write(text,sizeof(text)); //prints a string to the screen
;
	lda     #<(_text)            ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     #>(_text)            ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     pushax               ; USE: __AX_______  CHG: ____Y______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     #$00                 ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:00 Y:XX
	lda     #$1B                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:00 Y:XX  Out A:1B X:00 Y:XX
	jsr     _vram_write          ; USE: __AX_______  CHG: HLAXYT112VS  SIZE: 3    In A:1B X:00 Y:XX  Out A:XX X:XX Y:XX
;
; vram_adr(NTADR_A(30,3)); // set up a tile that should collide with the sprite zero
;
	ldx     #$20                 ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:20 Y:XX
	lda     #$7E                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:20 Y:XX  Out A:7E X:20 Y:XX
	jsr     _vram_adr            ; USE: __AX_______  CHG: HLAXYT112VS  SIZE: 3    In A:7E X:20 Y:XX  Out A:XX X:XX Y:XX
;
; vram_put(0xff); 
;
	lda     #$FF                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:FF X:XX Y:XX
	jsr     _vram_put            ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:FF X:XX Y:XX  Out A:XX X:XX Y:XX
;
; debug = 0xbb; 
;
	lda     #$BB                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:BB X:XX Y:XX
	sta     _debug               ; USE: __A________  CHG: ___________  SIZE: 3    In A:BB X:XX Y:XX  Out A:BB X:XX Y:XX
;
; set_data_pointer(Rooms[0]);
;
	lda     _Rooms               ; USE: ___________  CHG: __A________  SIZE: 3    In A:BB X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     _Rooms+1             ; USE: ___________  CHG: ___X_______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     _set_data_pointer    ; USE: __AX_______  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; set_mt_pointer(metatiles1); 
;
	lda     #<(_metatiles1)      ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     #>(_metatiles1)      ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     _set_mt_pointer      ; USE: __AX_______  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; debug = 0xbc;
;
	lda     #$BC                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:BC X:XX Y:XX
	sta     _debug               ; USE: __A________  CHG: ___________  SIZE: 3    In A:BC X:XX Y:XX  Out A:BC X:XX Y:XX
;
; for(y=0x20; ;y+=0x20){ // skip the top
;
	lda     #$20                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:BC X:XX Y:XX  Out A:20 X:XX Y:XX
L07F8:	sta     _y                   ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; for(x=0; ;x+=0x20){
;
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
L07F7:	sta     _x                   ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; clear_vram_buffer(); // do each frame, and before putting anything in the buffer
;
	jsr     _clear_vram_buffer   ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	ldy     #$01                 ; USE: ___________  CHG: ____Y______  SIZE: 2    In A:00 X:XX Y:XX  Out A:00 X:XX Y:01
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:00 X:XX Y:01  Out A:00 X:XX Y:01
	lda     _x                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:01  Out A:XX X:XX Y:01
	dey                          ; USE: ____Y______  CHG: ____Y______  SIZE: 1    In A:XX X:XX Y:01  Out A:XX X:XX Y:00
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
	lda     _y                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
	jsr     _get_ppu_addr        ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:00  Out A:XX X:XX Y:XX
	sta     _address             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	stx     _address+1           ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$F0                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     ptr1                 ; USE: __A________  CHG: _______1___  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _x                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     ptr1                 ; USE: __A____1___  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _index               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address             ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     _address+1           ; USE: ___________  CHG: ___X_______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     pushax               ; USE: __AX_______  CHG: ____Y______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _index               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     _buffer_4_mt         ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; debug = 0xca;  
;
	lda     #$CA                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:CA X:XX Y:XX
	sta     _debug               ; USE: __A________  CHG: ___________  SIZE: 3    In A:CA X:XX Y:XX  Out A:CA X:XX Y:XX
;
; flush_vram_update_nmi();
;
	jsr     _flush_vram_update_nmi ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:CA X:XX Y:XX  Out A:XX X:XX Y:XX
;
; debug = 0xcb; 
;
	lda     #$CB                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:CB X:XX Y:XX
	sta     _debug               ; USE: __A________  CHG: ___________  SIZE: 3    In A:CB X:XX Y:XX  Out A:CB X:XX Y:XX
;
; if (x == 0xe0) break;
;
	lda     _x                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:CB X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$E0                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L07FA                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; for(x=0; ;x+=0x20){
;
	lda     #$20                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:20 X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:20 X:XX Y:XX  Out A:20 X:XX Y:XX
	adc     _x                   ; USE: __A________  CHG: __A________  SIZE: 3    In A:20 X:XX Y:XX  Out A:XX X:XX Y:XX
	jmp     L07F7                ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if (y == 0xe0) break;
;
L07FA:	lda     _y                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:E0 X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$E0                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L07FB                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; for(y=0x20; ;y+=0x20){ // skip the top
;
	lda     #$20                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:20 X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:20 X:XX Y:XX  Out A:20 X:XX Y:XX
	adc     _y                   ; USE: __A________  CHG: __A________  SIZE: 3    In A:20 X:XX Y:XX  Out A:XX X:XX Y:XX
	jmp     L07F8                ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; debug = 0xbd;
;
L07FB:	lda     #$BD                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:E0 X:XX Y:XX  Out A:BD X:XX Y:XX
	sta     _debug               ; USE: __A________  CHG: ___________  SIZE: 3    In A:BD X:XX Y:XX  Out A:BD X:XX Y:XX
;
; set_data_pointer(Rooms[1]);
;
	lda     _Rooms+2             ; USE: ___________  CHG: __A________  SIZE: 3    In A:BD X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     _Rooms+2+1           ; USE: ___________  CHG: ___X_______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     _set_data_pointer    ; USE: __AX_______  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; debug = 0xbe;
;
	lda     #$BE                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:BE X:XX Y:XX
	sta     _debug               ; USE: __A________  CHG: ___________  SIZE: 3    In A:BE X:XX Y:XX  Out A:BE X:XX Y:XX
;
; for(y=0x20; ;y+=0x20){ // skip the top
;
	lda     #$20                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:BE X:XX Y:XX  Out A:20 X:XX Y:XX
L07F9:	sta     _y                   ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; x = 0;
;
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _x                   ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
;
; clear_vram_buffer(); // do each frame, and before putting anything in the buffer
;
	jsr     _clear_vram_buffer   ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
;
; address = get_ppu_addr(1, x, y);
;
	jsr     decsp2               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     #$01                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:01 X:XX Y:XX
	tay                          ; USE: __A________  CHG: ____Y______  SIZE: 1    In A:01 X:XX Y:XX  Out A:01 X:XX Y:01
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:01 X:XX Y:01  Out A:01 X:XX Y:01
	lda     _x                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:01 X:XX Y:01  Out A:XX X:XX Y:01
	dey                          ; USE: ____Y______  CHG: ____Y______  SIZE: 1    In A:XX X:XX Y:01  Out A:XX X:XX Y:00
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
	lda     _y                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
	jsr     _get_ppu_addr        ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:00  Out A:XX X:XX Y:XX
	sta     _address             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	stx     _address+1           ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; index = (y & 0xf0);
;
	lda     _y                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$F0                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _index               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address             ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     _address+1           ; USE: ___________  CHG: ___X_______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     pushax               ; USE: __AX_______  CHG: ____Y______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _index               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     _buffer_4_mt         ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; flush_vram_update_nmi();
;
	jsr     _flush_vram_update_nmi ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if (y == 0xe0) break;
;
	lda     _y                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$E0                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L07FC                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; for(y=0x20; ;y+=0x20){ // skip the top
;
	lda     #$20                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:20 X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:20 X:XX Y:XX  Out A:20 X:XX Y:XX
	adc     _y                   ; USE: __A________  CHG: __A________  SIZE: 3    In A:20 X:XX Y:XX  Out A:XX X:XX Y:XX
	jmp     L07F9                ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; debug = 0xbf;
;
L07FC:	lda     #$BF                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:E0 X:XX Y:XX  Out A:BF X:XX Y:XX
	sta     _debug               ; USE: __A________  CHG: ___________  SIZE: 3    In A:BF X:XX Y:XX  Out A:BF X:XX Y:XX
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer   ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:BF X:XX Y:XX  Out A:XX X:XX Y:XX
;
; debug = 0xb0;
;
	lda     #$B0                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:B0 X:XX Y:XX
	sta     _debug               ; USE: __A________  CHG: ___________  SIZE: 3    In A:B0 X:XX Y:XX  Out A:B0 X:XX Y:XX
;
; memcpy (c_map, Rooms[0], 240);
;
	lda     #<(_c_map)           ; USE: ___________  CHG: __A________  SIZE: 2    In A:B0 X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     #>(_c_map)           ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     pushax               ; USE: __AX_______  CHG: ____Y______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _Rooms               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     _Rooms+1             ; USE: ___________  CHG: ___X_______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     pushax               ; USE: __AX_______  CHG: ____Y______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     #$00                 ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:00 Y:XX
	lda     #$F0                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:00 Y:XX  Out A:F0 X:00 Y:XX
	jsr     _memcpy              ; USE: __AX_______  CHG: HLAXYT112VS  SIZE: 3    In A:F0 X:00 Y:XX  Out A:XX X:XX Y:XX
;
; debug = 0xb1;
;
	lda     #$B1                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:B1 X:XX Y:XX
	sta     _debug               ; USE: __A________  CHG: ___________  SIZE: 3    In A:B1 X:XX Y:XX  Out A:B1 X:XX Y:XX
;
; }
;
	rts                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:B1 X:XX Y:XX  Out A:B1 X:XX Y:XX

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear           ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; set_sprite_zero();
;
	jsr     _set_sprite_zero     ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; sprid = 4; // changed, skip the 0th sprite position
;
	lda     #$04                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:04 X:XX Y:XX
	sta     _sprid               ; USE: __A________  CHG: ___________  SIZE: 3    In A:04 X:XX Y:XX  Out A:04 X:XX Y:XX
;
; if(direction == LEFT) {
;
	lda     _direction           ; USE: ___________  CHG: __A________  SIZE: 3    In A:04 X:XX Y:XX  Out A:XX X:XX Y:XX
	bne     L05F0                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
;
; sprid = oam_meta_spr(high_byte(BoxGuy1.x), high_byte(BoxGuy1.y), sprid, RoundSprL);
;
	jsr     decsp3               ; USE: ___________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _BoxGuy1+1           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldy     #$02                 ; USE: ___________  CHG: ____Y______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:02
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:02  Out A:XX X:XX Y:02
	lda     _BoxGuy1+3           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:02  Out A:XX X:XX Y:02
	dey                          ; USE: ____Y______  CHG: ____Y______  SIZE: 1    In A:XX X:XX Y:02  Out A:XX X:XX Y:01
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	lda     _sprid               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	dey                          ; USE: ____Y______  CHG: ____Y______  SIZE: 1    In A:XX X:XX Y:01  Out A:XX X:XX Y:00
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
	lda     #<(_RoundSprL)       ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
	ldx     #>(_RoundSprL)       ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
;
; else{
;
	jmp     L07FE                ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
;
; sprid = oam_meta_spr(high_byte(BoxGuy1.x), high_byte(BoxGuy1.y), sprid, RoundSprR);
;
L05F0:	jsr     decsp3               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _BoxGuy1+1           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldy     #$02                 ; USE: ___________  CHG: ____Y______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:02
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:02  Out A:XX X:XX Y:02
	lda     _BoxGuy1+3           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:02  Out A:XX X:XX Y:02
	dey                          ; USE: ____Y______  CHG: ____Y______  SIZE: 1    In A:XX X:XX Y:02  Out A:XX X:XX Y:01
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	lda     _sprid               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	dey                          ; USE: ____Y______  CHG: ____Y______  SIZE: 1    In A:XX X:XX Y:01  Out A:XX X:XX Y:00
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
	lda     #<(_RoundSprR)       ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
	ldx     #>(_RoundSprR)       ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
L07FE:	jsr     _oam_meta_spr        ; USE: __AX_______  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:00  Out A:XX X:XX Y:XX
	sta     _sprid               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; }
;
	rts                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; old_x = BoxGuy1.x;
;
	lda     _BoxGuy1             ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _old_x               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _BoxGuy1+1           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _old_x+1             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(pad1 & PAD_LEFT){
;
	lda     _pad1                ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$02                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L0802                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; direction = LEFT;
;
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _direction           ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
;
; if(BoxGuy1.x <= 0x100) {
;
	lda     _BoxGuy1+1           ; USE: ___________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$01                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bne     L060C                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:01 X:XX Y:XX
	lda     _BoxGuy1             ; USE: ___________  CHG: __A________  SIZE: 3    In A:01 X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$01                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
L060C:	bcs     L060A                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; BoxGuy1.vel_x = 0;
;
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _BoxGuy1+4           ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _BoxGuy1+4+1         ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
;
; BoxGuy1.x = 0x100;
;
	ldx     #$01                 ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:00 X:XX Y:XX  Out A:00 X:01 Y:XX
	sta     _BoxGuy1             ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:01 Y:XX  Out A:00 X:01 Y:XX
	stx     _BoxGuy1+1           ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:00 X:01 Y:XX  Out A:00 X:01 Y:XX
;
; else if(BoxGuy1.x < 0x400) { // don't want to wrap around to the other side
;
	jmp     L063A                ; USE: ___________  CHG: ___________  SIZE: 3    In A:00 X:01 Y:XX  Out A:00 X:01 Y:XX
L060A:	ldx     _BoxGuy1+1           ; USE: ___________  CHG: ___X_______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	cpx     #$04                 ; USE: ___X_______  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bcs     L0612                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; BoxGuy1.vel_x = -0x100;
;
	ldx     #$FF                 ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:FF Y:XX
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:FF Y:XX  Out A:00 X:FF Y:XX
;
; else {
;
	jmp     L0804                ; USE: ___________  CHG: ___________  SIZE: 3    In A:00 X:FF Y:XX  Out A:00 X:FF Y:XX
;
; BoxGuy1.vel_x -= ACCEL;
;
L0612:	lda     _BoxGuy1+4           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sec                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sbc     #$20                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _BoxGuy1+4           ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bcs     L0619                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	dec     _BoxGuy1+4+1         ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(BoxGuy1.vel_x < -MAX_SPEED) BoxGuy1.vel_x = -MAX_SPEED;
;
L0619:	lda     _BoxGuy1+4           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$C0                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _BoxGuy1+4+1         ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sbc     #$FD                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bvc     L061C                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	eor     #$80                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
L061C:	jpl     L063A                ; USE: ___________  CHG: ___________  SIZE: 5    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     #$FD                 ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:FD Y:XX
	lda     #$C0                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:FD Y:XX  Out A:C0 X:FD Y:XX
;
; else if (pad1 & PAD_RIGHT){
;
	jmp     L0804                ; USE: ___________  CHG: ___________  SIZE: 3    In A:C0 X:FD Y:XX  Out A:C0 X:FD Y:XX
L0802:	lda     _pad1                ; USE: ___________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$01                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L0620                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; direction = RIGHT;
;
	lda     #$01                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:01 X:XX Y:XX
	sta     _direction           ; USE: __A________  CHG: ___________  SIZE: 3    In A:01 X:XX Y:XX  Out A:01 X:XX Y:XX
;
; BoxGuy1.vel_x += ACCEL;
;
	lda     #$20                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:01 X:XX Y:XX  Out A:20 X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:20 X:XX Y:XX  Out A:20 X:XX Y:XX
	adc     _BoxGuy1+4           ; USE: __A________  CHG: __A________  SIZE: 3    In A:20 X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _BoxGuy1+4           ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bcc     L0626                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	inc     _BoxGuy1+4+1         ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(BoxGuy1.vel_x > MAX_SPEED) BoxGuy1.vel_x = MAX_SPEED;
;
L0626:	lda     _BoxGuy1+4           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$41                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _BoxGuy1+4+1         ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sbc     #$02                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bvs     L0629                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	eor     #$80                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
L0629:	bpl     L063A                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     #$02                 ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:02 Y:XX
	lda     #$40                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:02 Y:XX  Out A:40 X:02 Y:XX
;
; else { // nothing pressed
;
	jmp     L0804                ; USE: ___________  CHG: ___________  SIZE: 3    In A:40 X:02 Y:XX  Out A:40 X:02 Y:XX
;
; if(BoxGuy1.vel_x >= 0x100) BoxGuy1.vel_x -= ACCEL;
;
L0620:	lda     _BoxGuy1+4           ; USE: ___________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$00                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _BoxGuy1+4+1         ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sbc     #$01                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bvs     L062F                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	eor     #$80                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
L062F:	bpl     L062D                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _BoxGuy1+4           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sec                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sbc     #$20                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _BoxGuy1+4           ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bcs     L063A                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	dec     _BoxGuy1+4+1         ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; else if(BoxGuy1.vel_x < -0x100) BoxGuy1.vel_x += ACCEL;
;
	jmp     L063A                ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
L062D:	lda     _BoxGuy1+4           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$00                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _BoxGuy1+4+1         ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sbc     #$FF                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bvc     L0636                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	eor     #$80                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
L0636:	asl     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	tax                          ; USE: __A________  CHG: ___X_______  SIZE: 1    In A:00 X:XX Y:XX  Out A:00 X:00 Y:XX
	bcc     L0804                ; USE: ___________  CHG: ___________  SIZE: 2    In A:00 X:00 Y:XX  Out A:00 X:00 Y:XX
	lda     #$20                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:00 X:00 Y:XX  Out A:20 X:00 Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:20 X:00 Y:XX  Out A:20 X:00 Y:XX
	adc     _BoxGuy1+4           ; USE: __A________  CHG: __A________  SIZE: 3    In A:20 X:00 Y:XX  Out A:XX X:00 Y:XX
	sta     _BoxGuy1+4           ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:00 Y:XX  Out A:XX X:00 Y:XX
	bcc     L063A                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:00 Y:XX  Out A:XX X:00 Y:XX
	inc     _BoxGuy1+4+1         ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:00 Y:XX  Out A:XX X:00 Y:XX
;
; else BoxGuy1.vel_x = 0;
;
	jmp     L063A                ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:00 Y:XX  Out A:XX X:00 Y:XX
L0804:	sta     _BoxGuy1+4           ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	stx     _BoxGuy1+4+1         ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; BoxGuy1.x += BoxGuy1.vel_x;
;
L063A:	lda     _BoxGuy1+4           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     _BoxGuy1             ; USE: __A________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _BoxGuy1             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _BoxGuy1+4+1         ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     _BoxGuy1+1           ; USE: __A________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _BoxGuy1+1           ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(BoxGuy1.x > 0xf800) { // make sure no wrap around to the other side
;
	lda     _BoxGuy1             ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$01                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _BoxGuy1+1           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sbc     #$F8                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bcc     L0805                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; BoxGuy1.x = 0x100;
;
	ldx     #$01                 ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:01 Y:XX
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:01 Y:XX  Out A:00 X:01 Y:XX
	sta     _BoxGuy1             ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:01 Y:XX  Out A:00 X:01 Y:XX
	stx     _BoxGuy1+1           ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:00 X:01 Y:XX  Out A:00 X:01 Y:XX
;
; BoxGuy1.vel_x = 0;
;
	sta     _BoxGuy1+4           ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:01 Y:XX  Out A:00 X:01 Y:XX
	sta     _BoxGuy1+4+1         ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:01 Y:XX  Out A:00 X:01 Y:XX
;
; L_R_switch = 1; // shinks the y values in bg_coll, less problems with head / feet collisions
;
L0805:	lda     #$01                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:01 X:XX Y:XX
	sta     _L_R_switch          ; USE: __A________  CHG: ___________  SIZE: 3    In A:01 X:XX Y:XX  Out A:01 X:XX Y:XX
;
; Generic.x = high_byte(BoxGuy1.x); // this is much faster than passing a pointer to BoxGuy1
;
	lda     _BoxGuy1+1           ; USE: ___________  CHG: __A________  SIZE: 3    In A:01 X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _Generic             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; Generic.y = high_byte(BoxGuy1.y);
;
	lda     _BoxGuy1+3           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _Generic+1           ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; Generic.width = HERO_WIDTH;
;
	lda     #$0D                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:0D X:XX Y:XX
	sta     _Generic+2           ; USE: __A________  CHG: ___________  SIZE: 3    In A:0D X:XX Y:XX  Out A:0D X:XX Y:XX
;
; Generic.height = HERO_HEIGHT;
;
	lda     #$0B                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:0D X:XX Y:XX  Out A:0B X:XX Y:XX
	sta     _Generic+3           ; USE: __A________  CHG: ___________  SIZE: 3    In A:0B X:XX Y:XX  Out A:0B X:XX Y:XX
;
; bg_collision();
;
	jsr     _bg_collision        ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:0B X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(collision_R && collision_L){ // if both true, probably half stuck in a wall
;
	lda     _collision_R         ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L0652                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _collision_L         ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L0652                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; BoxGuy1.x = old_x;
;
	lda     _old_x               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _BoxGuy1             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _old_x+1             ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _BoxGuy1+1           ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; BoxGuy1.vel_x = 0;
;
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _BoxGuy1+4           ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _BoxGuy1+4+1         ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
;
; else if(collision_L) {
;
	jmp     L0664                ; USE: ___________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
L0652:	lda     _collision_L         ; USE: ___________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L065B                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; BoxGuy1.vel_x = 0;
;
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _BoxGuy1+4           ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _BoxGuy1+4+1         ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - eject_L;
;
	lda     _BoxGuy1+1           ; USE: ___________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	sec                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sbc     _eject_L             ; USE: __A________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; else if(collision_R) {
;
	jmp     L0809                ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
L065B:	lda     _collision_R         ; USE: ___________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L0664                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; BoxGuy1.vel_x = 0;
;
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _BoxGuy1+4           ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _BoxGuy1+4+1         ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - eject_R;
;
	lda     _BoxGuy1+1           ; USE: ___________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	sec                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sbc     _eject_R             ; USE: __A________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
L0809:	sta     _BoxGuy1+1           ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(BoxGuy1.vel_y < 0x300){
;
L0664:	lda     _BoxGuy1+6           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$00                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _BoxGuy1+6+1         ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sbc     #$03                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bvc     L066E                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	eor     #$80                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
L066E:	bpl     L066C                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; BoxGuy1.vel_y += GRAVITY;
;
	lda     #$50                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:50 X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:50 X:XX Y:XX  Out A:50 X:XX Y:XX
	adc     _BoxGuy1+6           ; USE: __A________  CHG: __A________  SIZE: 3    In A:50 X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _BoxGuy1+6           ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bcc     L0672                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	inc     _BoxGuy1+6+1         ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; else{
;
	jmp     L0672                ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; BoxGuy1.vel_y = 0x300; // consistent
;
L066C:	ldx     #$03                 ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:03 Y:XX
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:03 Y:XX  Out A:00 X:03 Y:XX
	sta     _BoxGuy1+6           ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:03 Y:XX  Out A:00 X:03 Y:XX
	stx     _BoxGuy1+6+1         ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:00 X:03 Y:XX  Out A:00 X:03 Y:XX
;
; BoxGuy1.y += BoxGuy1.vel_y;
;
L0672:	lda     _BoxGuy1+6           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     _BoxGuy1+2           ; USE: __A________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _BoxGuy1+2           ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _BoxGuy1+6+1         ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     _BoxGuy1+2+1         ; USE: __A________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _BoxGuy1+2+1         ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; L_R_switch = 0;
;
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _L_R_switch          ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
;
; Generic.x = high_byte(BoxGuy1.x); // the rest should be the same
;
	lda     _BoxGuy1+1           ; USE: ___________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _Generic             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; Generic.y = high_byte(BoxGuy1.y);
;
	lda     _BoxGuy1+3           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _Generic+1           ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; bg_collision();
;
	jsr     _bg_collision        ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(collision_U) {
;
	lda     _collision_U         ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L0680                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; high_byte(BoxGuy1.y) = high_byte(BoxGuy1.y) - eject_U;
;
	lda     _BoxGuy1+3           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sec                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sbc     _eject_U             ; USE: __A________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _BoxGuy1+3           ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; else if(collision_D) {
;
	jmp     L080A                ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
L0680:	lda     _collision_D         ; USE: ___________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L0806                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; high_byte(BoxGuy1.y) = high_byte(BoxGuy1.y) - eject_D;
;
	lda     _BoxGuy1+3           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sec                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sbc     _eject_D             ; USE: __A________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _BoxGuy1+3           ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; BoxGuy1.y &= 0xff00;
;
	ldx     _BoxGuy1+2+1         ; USE: ___________  CHG: ___X_______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _BoxGuy1+2           ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
	stx     _BoxGuy1+2+1         ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
;
; if(BoxGuy1.vel_y > 0) {
;
	lda     _BoxGuy1+6           ; USE: ___________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$01                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _BoxGuy1+6+1         ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sbc     #$00                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bvs     L0693                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	eor     #$80                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
L0693:	bpl     L0806                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; BoxGuy1.vel_y = 0;
;
L080A:	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _BoxGuy1+6           ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _BoxGuy1+6+1         ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
;
; Generic.y = high_byte(BoxGuy1.y); // the rest should be the same
;
L0806:	lda     _BoxGuy1+3           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _Generic+1           ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; bg_check_low();
;
	jsr     _bg_check_low        ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(collision_D) {
;
	lda     _collision_D         ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L069C                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(pad1_new & PAD_A) {
;
	lda     _pad1_new            ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$80                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L069C                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; BoxGuy1.vel_y = JUMP_VEL; // JUMP
;
	ldx     #$FA                 ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:FA Y:XX
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:FA Y:XX  Out A:00 X:FA Y:XX
	sta     _BoxGuy1+6           ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:FA Y:XX  Out A:00 X:FA Y:XX
	stx     _BoxGuy1+6+1         ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:00 X:FA Y:XX  Out A:00 X:FA Y:XX
;
; sfx_play(SFX_JUMP, 0);
;
	jsr     pusha                ; USE: __A________  CHG: ____Y______  SIZE: 3    In A:00 X:FA Y:XX  Out A:00 X:FA Y:XX
	jsr     _sfx_play            ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:00 X:FA Y:XX  Out A:XX X:XX Y:XX
;
; if((scroll_x & 0xff) < 4){
;
L069C:	lda     _scroll_x            ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$04                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bcs     L06A3                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; new_cmap();
;
	jsr     _new_cmap            ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; temp5 = BoxGuy1.x;
;
L06A3:	lda     _BoxGuy1             ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp5               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _BoxGuy1+1           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp5+1             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if (BoxGuy1.x > MAX_RIGHT){
;
	lda     _BoxGuy1             ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$01                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _BoxGuy1+1           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sbc     #$B0                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bcc     L06AA                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; temp1 = (BoxGuy1.x - MAX_RIGHT) >> 8;
;
	lda     _BoxGuy1+1           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sec                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sbc     #$B0                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp1               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; scroll_x += temp1;
;
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     _scroll_x            ; USE: __A________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _scroll_x            ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	adc     _scroll_x+1          ; USE: __A________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _scroll_x+1          ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - temp1;
;
	lda     _BoxGuy1+1           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sec                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sbc     _temp1               ; USE: __A________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _BoxGuy1+1           ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(scroll_x >= MAX_SCROLL) {
;
L06AA:	lda     _scroll_x            ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$FF                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _scroll_x+1          ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sbc     #$03                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bcc     L06BF                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; scroll_x = MAX_SCROLL; // stop scrolling right, end of level
;
	ldx     #$03                 ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:03 Y:XX
	lda     #$FF                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:03 Y:XX  Out A:FF X:03 Y:XX
	sta     _scroll_x            ; USE: __A________  CHG: ___________  SIZE: 3    In A:FF X:03 Y:XX  Out A:FF X:03 Y:XX
	stx     _scroll_x+1          ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:FF X:03 Y:XX  Out A:FF X:03 Y:XX
;
; BoxGuy1.x = temp5; // but allow the x position to go all the way right
;
	lda     _temp5               ; USE: ___________  CHG: __A________  SIZE: 3    In A:FF X:03 Y:XX  Out A:XX X:03 Y:XX
	sta     _BoxGuy1             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:03 Y:XX  Out A:XX X:03 Y:XX
	lda     _temp5+1             ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:03 Y:XX  Out A:XX X:03 Y:XX
	sta     _BoxGuy1+1           ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:03 Y:XX  Out A:XX X:03 Y:XX
;
; if(high_byte(BoxGuy1.x) >= 0xf1) {
;
	cmp     #$F1                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:03 Y:XX  Out A:XX X:03 Y:XX
	bcc     L06BF                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:03 Y:XX  Out A:XX X:03 Y:XX
;
; BoxGuy1.x = 0xf100;
;
	ldx     #$F1                 ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:03 Y:XX  Out A:XX X:F1 Y:XX
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:F1 Y:XX  Out A:00 X:F1 Y:XX
	sta     _BoxGuy1             ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:F1 Y:XX  Out A:00 X:F1 Y:XX
	stx     _BoxGuy1+1           ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:00 X:F1 Y:XX  Out A:00 X:F1 Y:XX
;
; } 
;
L06BF:	rts                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision: near

.segment	"CODE"

;
; collision_L = 0;
;
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _collision_L         ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
;
; collision_R = 0;
;
	sta     _collision_R         ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
;
; collision_U = 0;
;
	sta     _collision_U         ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
;
; collision_D = 0;
;
	sta     _collision_D         ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
;
; if(Generic.y >= 0xf0) return;
;
	lda     _Generic+1           ; USE: ___________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$F0                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bcc     L0812                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; }
;
	rts                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; temp6 = temp5 = Generic.x + scroll_x; // upper left (temp6 = save for reuse)
;
L0812:	lda     _Generic             ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     _scroll_x            ; USE: __A________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	pha                          ; USE: __A________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	adc     _scroll_x+1          ; USE: __A________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	tax                          ; USE: __A________  CHG: ___X_______  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	pla                          ; USE: ___________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp5               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	stx     _temp5+1             ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp6               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	stx     _temp6+1             ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; temp1 = temp5 & 0xff; // low byte x
;
	lda     _temp5               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp1               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; temp2 = temp5 >> 8; // high byte x
;
	lda     _temp5+1             ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp2               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; eject_L = temp1 | 0xf0;
;
	lda     _temp1               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ora     #$F0                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _eject_L             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; temp3 = Generic.y; // y top
;
	lda     _Generic+1           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp3               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; eject_U = temp3 | 0xf0;
;
	ora     #$F0                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _eject_U             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(L_R_switch) temp3 += 2; // fix bug, walking through walls
;
	lda     _L_R_switch          ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L06DC                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     #$02                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:02 X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:02 X:XX Y:XX  Out A:02 X:XX Y:XX
	adc     _temp3               ; USE: __A________  CHG: __A________  SIZE: 3    In A:02 X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp3               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; bg_collision_sub();
;
L06DC:	jsr     _bg_collision_sub    ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(collision & COL_ALL){ // find a corner in the collision map
;
	lda     _collision           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$40                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L080C                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; ++collision_L;
;
	inc     _collision_L         ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; ++collision_U;
;
	inc     _collision_U         ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; temp5 += Generic.width;
;
L080C:	lda     _Generic+2           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     _temp5               ; USE: __A________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp5               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	adc     _temp5+1             ; USE: __A________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp5+1             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; temp1 = temp5 & 0xff; // low byte x
;
	lda     _temp5               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp1               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; temp2 = temp5 >> 8; // high byte x
;
	lda     _temp5+1             ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp2               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; eject_R = (temp1 + 1) & 0x0f;
;
	lda     _temp1               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     #$01                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$0F                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _eject_R             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub    ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(collision & COL_ALL){ // find a corner in the collision map
;
	lda     _collision           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$40                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L080D                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; ++collision_R;
;
	inc     _collision_R         ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; ++collision_U;
;
	inc     _collision_U         ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; temp3 = Generic.y + Generic.height; //y bottom
;
L080D:	lda     _Generic+1           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     _Generic+3           ; USE: __A________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp3               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(L_R_switch) temp3 -= 2; // fix bug, walking through walls
;
	lda     _L_R_switch          ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L080E                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _temp3               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sec                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sbc     #$02                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp3               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; eject_D = (temp3 + 1) & 0x0f;
;
L080E:	lda     _temp3               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     #$01                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$0F                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _eject_D             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(temp3 >= 0xf0) return;
;
	lda     _temp3               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$F0                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bcs     L0714                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub    ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(collision & COL_ALL){ // find a corner in the collision map
;
	lda     _collision           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$40                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L080F                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; ++collision_R;
;
	inc     _collision_R         ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(collision & (COL_DOWN|COL_ALL)){ // find a corner in the collision map
;
L080F:	lda     _collision           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$C0                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L0704                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; ++collision_D;
;
	inc     _collision_D         ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; temp1 = temp6 & 0xff; // low byte x
;
L0704:	lda     _temp6               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp1               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; temp2 = temp6 >> 8; // high byte x
;
	lda     _temp6+1             ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp2               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub    ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(collision & COL_ALL){ // find a corner in the collision map
;
	lda     _collision           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$40                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L0810                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; ++collision_L;
;
	inc     _collision_L         ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(collision & (COL_DOWN|COL_ALL)){ // find a corner in the collision map
;
L0810:	lda     _collision           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$C0                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L0811                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; ++collision_D;
;
	inc     _collision_D         ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if((temp3 & 0x0f) > 3) collision_D = 0; // for platforms, only collide with the top 3 pixels
;
L0811:	lda     _temp3               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$0F                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$04                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bcc     L0714                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _collision_D         ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
;
; }
;
L0714:	rts                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_R: near

.segment	"CODE"

;
; pseudo_scroll_x = scroll_x + 0x120;
;
	lda     _scroll_x            ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     _scroll_x+1          ; USE: ___________  CHG: ___X_______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     #$20                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bcc     L0732                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	inx                          ; USE: ___X_______  CHG: ___X_______  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
L0732:	inx                          ; USE: ___X_______  CHG: ___X_______  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _pseudo_scroll_x     ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	stx     _pseudo_scroll_x+1   ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; temp1 = pseudo_scroll_x >> 8;
;
	lda     _pseudo_scroll_x+1   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp1               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; set_data_pointer(Rooms[temp1]);
;
	ldx     #$00                 ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:00 Y:XX
	lda     _temp1               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:00 Y:XX  Out A:XX X:00 Y:XX
	asl     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:00 Y:XX  Out A:XX X:00 Y:XX
	bcc     L0815                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:00 Y:XX  Out A:XX X:00 Y:XX
	inx                          ; USE: ___X_______  CHG: ___X_______  SIZE: 1    In A:XX X:00 Y:XX  Out A:XX X:01 Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:01 Y:XX  Out A:XX X:01 Y:XX
L0815:	adc     #<(_Rooms)           ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     ptr1                 ; USE: __A________  CHG: _______1___  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	txa                          ; USE: ___X_______  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     #>(_Rooms)           ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     ptr1+1               ; USE: __A________  CHG: _______1___  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldy     #$01                 ; USE: ___________  CHG: ____Y______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:01
	lda     (ptr1),y             ; USE: ____Y__1___  CHG: __A________  SIZE: 2    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	tax                          ; USE: __A________  CHG: ___X_______  SIZE: 1    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	dey                          ; USE: ____Y______  CHG: ____Y______  SIZE: 1    In A:XX X:XX Y:01  Out A:XX X:XX Y:00
	lda     (ptr1),y             ; USE: ____Y__1___  CHG: __A________  SIZE: 2    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
	jsr     _set_data_pointer    ; USE: __AX_______  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:00  Out A:XX X:XX Y:XX
;
; nt = temp1 & 1;
;
	lda     _temp1               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$01                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _nt                  ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; x = pseudo_scroll_x & 0xff;
;
	lda     _pseudo_scroll_x     ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _x                   ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; switch(scroll_count){
;
	lda     _scroll_count        ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; }
;
	beq     L0740                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$01                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L074E                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$02                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jeq     L0768                ; USE: ___________  CHG: ___________  SIZE: 5    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jmp     L0781                ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; address = get_ppu_addr(nt, x, 0x20);
;
L0740:	jsr     decsp2               ; USE: ___________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _nt                  ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldy     #$01                 ; USE: ___________  CHG: ____Y______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:01
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	lda     _x                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	dey                          ; USE: ____Y______  CHG: ____Y______  SIZE: 1    In A:XX X:XX Y:01  Out A:XX X:XX Y:00
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
	lda     #$20                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:00  Out A:20 X:XX Y:00
	jsr     _get_ppu_addr        ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:20 X:XX Y:00  Out A:XX X:XX Y:XX
	sta     _address             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	stx     _address+1           ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; index = 0x20 + (x >> 4);
;
	lda     _x                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     #$20                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; break;
;
	jmp     L081A                ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; address = get_ppu_addr(nt, x, 0x40);
;
L074E:	jsr     decsp2               ; USE: ___________  CHG: __A________  SIZE: 3    In A:01 X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _nt                  ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldy     #$01                 ; USE: ___________  CHG: ____Y______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:01
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	lda     _x                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	dey                          ; USE: ____Y______  CHG: ____Y______  SIZE: 1    In A:XX X:XX Y:01  Out A:XX X:XX Y:00
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
	lda     #$40                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:00  Out A:40 X:XX Y:00
	jsr     _get_ppu_addr        ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:40 X:XX Y:00  Out A:XX X:XX Y:XX
	sta     _address             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	stx     _address+1           ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; index = 0x40 + (x >> 4);
;
	lda     _x                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     #$40                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _index               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address             ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     _address+1           ; USE: ___________  CHG: ___X_______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     pushax               ; USE: __AX_______  CHG: ____Y______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _index               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     _buffer_4_mt         ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; address = get_ppu_addr(nt, x, 0x60);
;
	jsr     decsp2               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _nt                  ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldy     #$01                 ; USE: ___________  CHG: ____Y______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:01
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	lda     _x                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	dey                          ; USE: ____Y______  CHG: ____Y______  SIZE: 1    In A:XX X:XX Y:01  Out A:XX X:XX Y:00
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
	lda     #$60                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:00  Out A:60 X:XX Y:00
	jsr     _get_ppu_addr        ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:60 X:XX Y:00  Out A:XX X:XX Y:XX
	sta     _address             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	stx     _address+1           ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; index = 0x60 + (x >> 4);
;
	lda     _x                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     #$60                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; break;
;
	jmp     L081A                ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; address = get_ppu_addr(nt, x, 0x80);
;
L0768:	jsr     decsp2               ; USE: ___________  CHG: __A________  SIZE: 3    In A:02 X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _nt                  ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldy     #$01                 ; USE: ___________  CHG: ____Y______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:01
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	lda     _x                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	dey                          ; USE: ____Y______  CHG: ____Y______  SIZE: 1    In A:XX X:XX Y:01  Out A:XX X:XX Y:00
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
	lda     #$80                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:00  Out A:80 X:XX Y:00
	jsr     _get_ppu_addr        ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:80 X:XX Y:00  Out A:XX X:XX Y:XX
	sta     _address             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	stx     _address+1           ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; index = 0x80 + (x >> 4);
;
	lda     _x                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     #$80                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _index               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address             ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     _address+1           ; USE: ___________  CHG: ___X_______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     pushax               ; USE: __AX_______  CHG: ____Y______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _index               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     _buffer_4_mt         ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; address = get_ppu_addr(nt, x, 0xa0);
;
	jsr     decsp2               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _nt                  ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldy     #$01                 ; USE: ___________  CHG: ____Y______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:01
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	lda     _x                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	dey                          ; USE: ____Y______  CHG: ____Y______  SIZE: 1    In A:XX X:XX Y:01  Out A:XX X:XX Y:00
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
	lda     #$A0                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:00  Out A:A0 X:XX Y:00
	jsr     _get_ppu_addr        ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:A0 X:XX Y:00  Out A:XX X:XX Y:XX
	sta     _address             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	stx     _address+1           ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; index = 0xa0 + (x >> 4);
;
	lda     _x                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     #$A0                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; break;
;
	jmp     L081A                ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; address = get_ppu_addr(nt, x, 0xc0);
;
L0781:	jsr     decsp2               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _nt                  ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldy     #$01                 ; USE: ___________  CHG: ____Y______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:01
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	lda     _x                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	dey                          ; USE: ____Y______  CHG: ____Y______  SIZE: 1    In A:XX X:XX Y:01  Out A:XX X:XX Y:00
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
	lda     #$C0                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:00  Out A:C0 X:XX Y:00
	jsr     _get_ppu_addr        ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:C0 X:XX Y:00  Out A:XX X:XX Y:XX
	sta     _address             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	stx     _address+1           ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; index = 0xc0 + (x >> 4);
;
	lda     _x                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     #$C0                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _index               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address             ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     _address+1           ; USE: ___________  CHG: ___X_______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     pushax               ; USE: __AX_______  CHG: ____Y______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _index               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     _buffer_4_mt         ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; address = get_ppu_addr(nt, x, 0xe0);
;
	jsr     decsp2               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _nt                  ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldy     #$01                 ; USE: ___________  CHG: ____Y______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:01
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	lda     _x                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	dey                          ; USE: ____Y______  CHG: ____Y______  SIZE: 1    In A:XX X:XX Y:01  Out A:XX X:XX Y:00
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
	lda     #$E0                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:00  Out A:E0 X:XX Y:00
	jsr     _get_ppu_addr        ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:E0 X:XX Y:00  Out A:XX X:XX Y:XX
	sta     _address             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	stx     _address+1           ; USE: ___X_______  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; index = 0xe0 + (x >> 4);
;
	lda     _x                   ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     #$E0                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
L081A:	sta     _index               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address             ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     _address+1           ; USE: ___________  CHG: ___X_______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     pushax               ; USE: __AX_______  CHG: ____Y______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _index               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     _buffer_4_mt         ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; ++scroll_count;
;
	inc     _scroll_count        ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; scroll_count &= 3; //mask off top bits, keep it 0-3
;
	lda     _scroll_count        ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$03                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _scroll_count        ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; }
;
	rts                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX

.endproc

; ---------------------------------------------------------------
; void __near__ new_cmap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_new_cmap: near

.segment	"CODE"

;
; room = ((scroll_x >> 8) +1); //high byte = room, one to the right
;
	lda     _scroll_x+1          ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     #$01                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _room                ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; map = room & 1; //even or odd?
;
	and     #$01                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _map                 ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(!map){
;
	lda     _map                 ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bne     L07A5                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
;
; memcpy (c_map, Rooms[room], 240);
;
	lda     #<(_c_map)           ; USE: ___________  CHG: __A________  SIZE: 2    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     #>(_c_map)           ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     pushax               ; USE: __AX_______  CHG: ____Y______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     #$00                 ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:00 Y:XX
	lda     _room                ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:00 Y:XX  Out A:XX X:00 Y:XX
	asl     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:00 Y:XX  Out A:XX X:00 Y:XX
	bcc     L081D                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:00 Y:XX  Out A:XX X:00 Y:XX
	inx                          ; USE: ___X_______  CHG: ___X_______  SIZE: 1    In A:XX X:00 Y:XX  Out A:XX X:01 Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:01 Y:XX  Out A:XX X:01 Y:XX
L081D:	adc     #<(_Rooms)           ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     ptr1                 ; USE: __A________  CHG: _______1___  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	txa                          ; USE: ___X_______  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     #>(_Rooms)           ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     ptr1+1               ; USE: __A________  CHG: _______1___  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldy     #$01                 ; USE: ___________  CHG: ____Y______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:01
	lda     (ptr1),y             ; USE: ____Y__1___  CHG: __A________  SIZE: 2    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	tax                          ; USE: __A________  CHG: ___X_______  SIZE: 1    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	dey                          ; USE: ____Y______  CHG: ____Y______  SIZE: 1    In A:XX X:XX Y:01  Out A:XX X:XX Y:00
	lda     (ptr1),y             ; USE: ____Y__1___  CHG: __A________  SIZE: 2    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
	jsr     pushax               ; USE: __AX_______  CHG: ____Y______  SIZE: 3    In A:XX X:XX Y:00  Out A:XX X:XX Y:XX
	ldx     #$00                 ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:00 Y:XX
	lda     #$F0                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:00 Y:XX  Out A:F0 X:00 Y:XX
	jmp     _memcpy              ; USE: __AX_______  CHG: HLAXYT112VS  SIZE: 3    In A:F0 X:00 Y:XX  Out A:F0 X:00 Y:XX
;
; memcpy (c_map2, Rooms[room], 240);
;
L07A5:	lda     #<(_c_map2)          ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     #>(_c_map2)          ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     pushax               ; USE: __AX_______  CHG: ____Y______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     #$00                 ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:00 Y:XX
	lda     _room                ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:00 Y:XX  Out A:XX X:00 Y:XX
	asl     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:00 Y:XX  Out A:XX X:00 Y:XX
	bcc     L081E                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:00 Y:XX  Out A:XX X:00 Y:XX
	inx                          ; USE: ___X_______  CHG: ___X_______  SIZE: 1    In A:XX X:00 Y:XX  Out A:XX X:01 Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:01 Y:XX  Out A:XX X:01 Y:XX
L081E:	adc     #<(_Rooms)           ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     ptr1                 ; USE: __A________  CHG: _______1___  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	txa                          ; USE: ___X_______  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     #>(_Rooms)           ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     ptr1+1               ; USE: __A________  CHG: _______1___  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldy     #$01                 ; USE: ___________  CHG: ____Y______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:01
	lda     (ptr1),y             ; USE: ____Y__1___  CHG: __A________  SIZE: 2    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	tax                          ; USE: __A________  CHG: ___X_______  SIZE: 1    In A:XX X:XX Y:01  Out A:XX X:XX Y:01
	dey                          ; USE: ____Y______  CHG: ____Y______  SIZE: 1    In A:XX X:XX Y:01  Out A:XX X:XX Y:00
	lda     (ptr1),y             ; USE: ____Y__1___  CHG: __A________  SIZE: 2    In A:XX X:XX Y:00  Out A:XX X:XX Y:00
	jsr     pushax               ; USE: __AX_______  CHG: ____Y______  SIZE: 3    In A:XX X:XX Y:00  Out A:XX X:XX Y:XX
	ldx     #$00                 ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:00 Y:XX
	lda     #$F0                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:00 Y:XX  Out A:F0 X:00 Y:XX
	jmp     _memcpy              ; USE: __AX_______  CHG: HLAXYT112VS  SIZE: 3    In A:F0 X:00 Y:XX  Out A:F0 X:00 Y:XX

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; coordinates = (temp1 >> 4) + (temp3 & 0xf0);
;
	lda     _temp1               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lsr     a                    ; USE: __A________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     ptr1                 ; USE: __A________  CHG: _______1___  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _temp3               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$F0                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     ptr1                 ; USE: __A____1___  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _coordinates         ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; map = temp2&1; // high byte
;
	lda     _temp2               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$01                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _map                 ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(!map){
;
	lda     _map                 ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bne     L0720                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
;
; collision = c_map[coordinates];
;
	ldy     _coordinates         ; USE: ___________  CHG: ____Y______  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
	lda     _c_map,y             ; USE: ____Y______  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
;
; else{
;
	jmp     L081F                ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; collision = c_map2[coordinates];
;
L0720:	ldy     _coordinates         ; USE: ___________  CHG: ____Y______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _c_map2,y            ; USE: ____Y______  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
L081F:	sta     _collision           ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; collision = is_solid[collision];
;
	ldy     _collision           ; USE: ___________  CHG: ____Y______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     _is_solid,y          ; USE: ____Y______  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _collision           ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; }
;
	rts                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX

.endproc

; ---------------------------------------------------------------
; void __near__ bg_check_low (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_check_low: near

.segment	"CODE"

;
; collision_D = 0;
;
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _collision_D         ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
;
; temp5 = Generic.x + scroll_x;    //left
;
	lda     _Generic             ; USE: ___________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     _scroll_x            ; USE: __A________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	pha                          ; USE: __A________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	adc     _scroll_x+1          ; USE: __A________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp5+1             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	pla                          ; USE: ___________  CHG: __A________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp5               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; temp1 = temp5 & 0xff; //low byte
;
	sta     _temp1               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; temp2 = temp5 >> 8; //high byte
;
	lda     _temp5+1             ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp2               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; temp3 = Generic.y + Generic.height + 1; // bottom
;
	lda     _Generic+1           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     _Generic+3           ; USE: __A________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bcc     L0822                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
L0822:	adc     #$01                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp3               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(temp3 >= 0xf0) return;
;
	cmp     #$F0                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bcs     L07D0                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub    ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(collision & (COL_DOWN|COL_ALL)){ // find a corner in the collision map
;
	lda     _collision           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$C0                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L0823                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; ++collision_D;
;
	inc     _collision_D         ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; temp5 += Generic.width;
;
L0823:	lda     _Generic+2           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	clc                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	adc     _temp5               ; USE: __A________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp5               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	adc     _temp5+1             ; USE: __A________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp5+1             ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; temp1 = temp5 & 0xff; //low byte
;
	lda     _temp5               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp1               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; temp2 = temp5 >> 8; //high byte
;
	lda     _temp5+1             ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _temp2               ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub    ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(collision & (COL_DOWN|COL_ALL)){ // find a corner in the collision map
;
	lda     _collision           ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$C0                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L0824                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; ++collision_D;
;
	inc     _collision_D         ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if((temp3 & 0x0f) > 3) collision_D = 0; // for platforms, only collide with the top 3 pixels
;
L0824:	lda     _temp3               ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$0F                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$04                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bcc     L07D0                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _collision_D         ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
;
; }
;
L07D0:	rts                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX

.endproc

; ---------------------------------------------------------------
; void __near__ change_song (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_change_song: near

.segment	"CODE"

;
; if(pad1_new & PAD_START) {
;
	lda     _pad1_new            ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$10                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L07D6                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; ++song;
;
	inc     _song                ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(song >= MAX_SONGS) song = 0;
;
	lda     _song                ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	cmp     #$02                 ; USE: __A________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	bcc     L07D9                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _song                ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
;
; music_play(song);
;
L07D9:	lda     _song                ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jmp     _music_play          ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; }
;
L07D6:	rts                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX

.endproc

; ---------------------------------------------------------------
; void __near__ check_sfx (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_sfx: near

.segment	"CODE"

;
; if(pad1_new & PAD_B) {
;
	lda     _pad1_new            ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$40                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L0825                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; sfx_play(SFX_NOISE, 0);
;
	lda     #$02                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:02 X:XX Y:XX
	jsr     pusha                ; USE: __A________  CHG: ____Y______  SIZE: 3    In A:02 X:XX Y:XX  Out A:02 X:XX Y:XX
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:02 X:XX Y:XX  Out A:00 X:XX Y:XX
	jsr     _sfx_play            ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
;
; if(pad1_new & PAD_SELECT) {
;
L0825:	lda     _pad1_new            ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	and     #$20                 ; USE: __A________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	beq     L07E5                ; USE: ___________  CHG: ___________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; sfx_play(SFX_DING, 0);
;
	lda     #$01                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:01 X:XX Y:XX
	jsr     pusha                ; USE: __A________  CHG: ____Y______  SIZE: 3    In A:01 X:XX Y:XX  Out A:01 X:XX Y:XX
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:01 X:XX Y:XX  Out A:00 X:XX Y:XX
	jsr     _sfx_play            ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
;
; pal_col(0x1f, 0x30); // make the sprite zero white
;
	lda     #$1F                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:1F X:XX Y:XX
	jsr     pusha                ; USE: __A________  CHG: ____Y______  SIZE: 3    In A:1F X:XX Y:XX  Out A:1F X:XX Y:XX
	lda     #$30                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:1F X:XX Y:XX  Out A:30 X:XX Y:XX
	jmp     _pal_col             ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:30 X:XX Y:XX  Out A:30 X:XX Y:XX
;
; }
;
L07E5:	rts                          ; USE: ___________  CHG: ___________  SIZE: 1    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX

.endproc

; ---------------------------------------------------------------
; void __near__ set_sprite_zero (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_sprite_zero: near

.segment	"CODE"

;
; sprid = 0;
;
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _sprid               ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
;
; oam_spr(0xf0,0x18,0xff,3,sprid);
;
	jsr     decsp4               ; USE: ___________  CHG: __A________  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	lda     #$F0                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:F0 X:XX Y:XX
	ldy     #$03                 ; USE: ___________  CHG: ____Y______  SIZE: 2    In A:F0 X:XX Y:XX  Out A:F0 X:XX Y:03
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:F0 X:XX Y:03  Out A:F0 X:XX Y:03
	lda     #$18                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:F0 X:XX Y:03  Out A:18 X:XX Y:03
	dey                          ; USE: ____Y______  CHG: ____Y______  SIZE: 1    In A:18 X:XX Y:03  Out A:18 X:XX Y:02
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:18 X:XX Y:02  Out A:18 X:XX Y:02
	lda     #$FF                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:18 X:XX Y:02  Out A:FF X:XX Y:02
	dey                          ; USE: ____Y______  CHG: ____Y______  SIZE: 1    In A:FF X:XX Y:02  Out A:FF X:XX Y:01
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:FF X:XX Y:01  Out A:FF X:XX Y:01
	lda     #$03                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:FF X:XX Y:01  Out A:03 X:XX Y:01
	dey                          ; USE: ____Y______  CHG: ____Y______  SIZE: 1    In A:03 X:XX Y:01  Out A:03 X:XX Y:00
	sta     (sp),y               ; USE: __A_Y_____S  CHG: ___________  SIZE: 2    In A:03 X:XX Y:00  Out A:03 X:XX Y:00
	lda     _sprid               ; USE: ___________  CHG: __A________  SIZE: 3    In A:03 X:XX Y:00  Out A:XX X:XX Y:00
	jmp     _oam_spr             ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:00  Out A:XX X:XX Y:00

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; debug = 0xaa;
;
	lda     #$AA                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:AA X:XX Y:XX
	sta     _debug               ; USE: __A________  CHG: ___________  SIZE: 3    In A:AA X:XX Y:XX  Out A:AA X:XX Y:XX
;
; ppu_off(); // screen off
;
	jsr     _ppu_off             ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:AA X:XX Y:XX  Out A:XX X:XX Y:XX
;
; debug = 0xab;
;
	lda     #$AB                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:AB X:XX Y:XX
	sta     _debug               ; USE: __A________  CHG: ___________  SIZE: 3    In A:AB X:XX Y:XX  Out A:AB X:XX Y:XX
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)      ; USE: ___________  CHG: __A________  SIZE: 2    In A:AB X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     #>(_palette_bg)      ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     _pal_bg              ; USE: __AX_______  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)      ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     #>(_palette_sp)      ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     _pal_spr             ; USE: __AX_______  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; bank_spr(1);
;
	lda     #$01                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:01 X:XX Y:XX
	jsr     _bank_spr            ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:01 X:XX Y:XX  Out A:XX X:XX Y:XX
;
; set_vram_buffer(); // do at least once
;
	jsr     _set_vram_buffer     ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer   ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; debug = 0xac;
;
	lda     #$AC                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:AC X:XX Y:XX
	sta     _debug               ; USE: __A________  CHG: ___________  SIZE: 3    In A:AC X:XX Y:XX  Out A:AC X:XX Y:XX
;
; load_room();
;
	jsr     _load_room           ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:AC X:XX Y:XX  Out A:XX X:XX Y:XX
;
; debug = 0xad;
;
	lda     #$AD                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:AD X:XX Y:XX
	sta     _debug               ; USE: __A________  CHG: ___________  SIZE: 3    In A:AD X:XX Y:XX  Out A:AD X:XX Y:XX
;
; song = 0;
;
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:AD X:XX Y:XX  Out A:00 X:XX Y:XX
	sta     _song                ; USE: __A________  CHG: ___________  SIZE: 3    In A:00 X:XX Y:XX  Out A:00 X:XX Y:XX
;
; music_play(song);
;
	jsr     _music_play          ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all          ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; set_sprite_zero(); // this needs to be done before ppu_wait_nmi, before the first frame
;
	jsr     _set_sprite_zero     ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0560:	jsr     _ppu_wait_nmi        ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; split(scroll_x);
;
	lda     _scroll_x            ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     _scroll_x+1          ; USE: ___________  CHG: ___X_______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     _split               ; USE: __AX_______  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; set_music_speed(8);
;
	lda     #$08                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:08 X:XX Y:XX
	jsr     _set_music_speed     ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:08 X:XX Y:XX  Out A:XX X:XX Y:XX
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	jsr     _pad_poll            ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _pad1                ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; pad1_new = get_pad_new(0);
;
	lda     #$00                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:00 X:XX Y:XX
	jsr     _get_pad_new         ; USE: __A________  CHG: HLAXYT112VS  SIZE: 3    In A:00 X:XX Y:XX  Out A:XX X:XX Y:XX
	sta     _pad1_new            ; USE: __A________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; clear_vram_buffer(); // do at the beginning of each frame
;
	jsr     _clear_vram_buffer   ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; movement();
;
	jsr     _movement            ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; set_scroll_x(0); // changed
;
	ldx     #$00                 ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:00 Y:XX
	txa                          ; USE: ___X_______  CHG: __A________  SIZE: 1    In A:XX X:00 Y:XX  Out A:00 X:00 Y:XX
	jsr     _set_scroll_x        ; USE: __AX_______  CHG: HLAXYT112VS  SIZE: 3    In A:00 X:00 Y:XX  Out A:XX X:XX Y:XX
;
; set_scroll_y(scroll_y);
;
	lda     _scroll_y            ; USE: ___________  CHG: __A________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	ldx     _scroll_y+1          ; USE: ___________  CHG: ___X_______  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
	jsr     _set_scroll_y        ; USE: __AX_______  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; draw_screen_R();
;
	jsr     _draw_screen_R       ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; draw_sprites();
;
	jsr     _draw_sprites        ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; change_song();
;
	jsr     _change_song         ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; check_sfx();
;
	jsr     _check_sfx           ; USE: ___________  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
;
; while (1){
;
	jmp     L0560                ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX

.endproc

