;
; File generated by cc65 v 2.16 - Ubuntu 2.16-2
;
	.fopt		compiler,"cc65 v 2.16 - Ubuntu 2.16-2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_col
	.import		_ppu_wait_frame
	.import		_ppu_on_all
	.import		_oam_spr
	.import		_pad_poll
	.import		_set_vram_update
	.import		_memcpy
	.export		_list_init
	.export		_main

.segment	"RODATA"

_list_init:
	.byte	$20
	.byte	$42
	.byte	$00
	.byte	$20
	.byte	$43
	.byte	$00
	.byte	$20
	.byte	$44
	.byte	$00
	.byte	$20
	.byte	$46
	.byte	$00
	.byte	$20
	.byte	$47
	.byte	$00
	.byte	$20
	.byte	$48
	.byte	$00
	.byte	$60
	.byte	$82
	.byte	$04
	.byte	$28
	.byte	$2F
	.byte	$32
	.byte	$3A
	.byte	$A0
	.byte	$C2
	.byte	$04
	.byte	$36
	.byte	$25
	.byte	$32
	.byte	$34
	.byte	$FF

.segment	"BSS"

.segment	"BSS"
_i:
	.res	1,$00
.segment	"BSS"
_x:
	.res	1,$00
.segment	"BSS"
_y:
	.res	1,$00
.segment	"BSS"
_list:
	.res	33,$00

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	lda     #$01
	jsr     pusha
	lda     #$21
	jsr     _pal_col
	lda     #$11
	jsr     pusha
	lda     #$30
	jsr     _pal_col
	lda     #<(_list)
	ldx     #>(_list)
	jsr     pushax
	lda     #<(_list_init)
	ldx     #>(_list_init)
	jsr     pushax
	ldx     #$00
	lda     #$21
	jsr     _memcpy
	lda     #<(_list)
	ldx     #>(_list)
	jsr     _set_vram_update
	jsr     _ppu_on_all
	lda     #$7C
	sta     _x
	lda     #$74
	sta     _y
L00B7:	jsr     _ppu_wait_frame
	jsr     decsp4
	lda     _x
	ldy     #$03
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #$41
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	jsr     _oam_spr
	lda     #$00
	jsr     _pad_poll
	sta     _i
	and     #$02
	beq     L00F8
	lda     _x
	beq     L00F8
	sec
	sbc     #$02
	sta     _x
L00F8:	lda     _i
	and     #$01
	beq     L00FC
	lda     _x
	cmp     #$F8
	bcs     L00FC
	lda     #$02
	clc
	adc     _x
	sta     _x
L00FC:	lda     _i
	and     #$08
	beq     L0100
	lda     _y
	beq     L0100
	sec
	sbc     #$02
	sta     _y
L0100:	lda     _i
	and     #$04
	beq     L0104
	lda     _y
	cmp     #$E8
	bcs     L0104
	lda     #$02
	clc
	adc     _y
	sta     _y
L0104:	lda     _x
	jsr     pusha0
	lda     #$64
	jsr     tosudiva0
	clc
	adc     #$10
	sta     _list+2
	lda     _x
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	jsr     pushax
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	sta     _list+5
	lda     _x
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	sta     _list+8
	lda     _y
	jsr     pusha0
	lda     #$64
	jsr     tosudiva0
	clc
	adc     #$10
	sta     _list+11
	lda     _y
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	jsr     pushax
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	sta     _list+14
	lda     _y
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	sta     _list+17
	jmp     L00B7

.endproc

