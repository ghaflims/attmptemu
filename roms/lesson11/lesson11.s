;
; File generated by cc65 v 2.16 - Ubuntu 2.16-2
;
	.fopt		compiler,"cc65 v 2.16 - Ubuntu 2.16-2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "lesson11.c", 12699, 1537217267
	.dbg		file, "DEFINE.c", 5482, 1531893934
	.dbg		file, "BG/A1.csv", 545, 1449611312
	.dbg		file, "BG/A2.csv", 545, 1449611342
	.dbg		file, "BG/A3.csv", 541, 1449611366
	.dbg		file, "BG/A4.csv", 550, 1449611276
	.dbg		file, "BufferMT.c", 3365, 1470820988
	.forceimport	__STARTUP__
	.dbg		sym, "memcpy", "00", extern, "_memcpy"
	.dbg		sym, "Wait_Vblank", "00", extern, "_Wait_Vblank"
	.dbg		sym, "Get_Input", "00", extern, "_Get_Input"
	.dbg		sym, "Sprite_Zero", "00", extern, "_Sprite_Zero"
	.dbg		sym, "Super_Fast_Write_PPU", "00", extern, "_Super_Fast_Write_PPU"
	.dbg		sym, "Super_Fast_Write_PPU2", "00", extern, "_Super_Fast_Write_PPU2"
	.export		_NMI_flag
	.export		_Frame_Count
	.export		_index
	.export		_index2
	.export		_index3
	.export		_index4
	.export		_X1
	.export		_Y1
	.export		_state
	.export		_state4
	.export		_joypad1
	.export		_joypad1old
	.export		_joypad1test
	.export		_joypad2
	.export		_joypad2old
	.export		_joypad2test
	.export		_Room
	.export		_RoomB
	.export		_RoomPlus
	.export		_Room_Address
	.export		_Horiz_scroll
	.export		_Horiz_scroll_Old
	.export		_Horiz_scroll_Plus
	.export		_Scroll_Adjusted_X
	.export		_Nametable
	.export		_NametableB
	.export		_Nametable_Plus
	.export		_walk_count
	.export		_X_speed
	.export		_Y_speed
	.export		_direction
	.export		_collision_Index
	.export		_high_byte
	.export		_collision
	.export		_temp
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_PPU_ADDRESS_High
	.export		_PPU_ADDRESS_Low
	.export		_A
	.export		_PPU_flag
	.export		_PPU_flag2
	.export		_dummy
	.export		_SPRITE_ZERO
	.export		_SPRITES
	.export		_C_MAP
	.export		_C_MAP2
	.export		_BUFFER1
	.export		_BUFFER2
	.export		_BUFFER3
	.export		_BUFFER4
	.export		_BUFFER5
	.export		_BUFFER6
	.export		_BUFFER7
	.export		_A1
	.export		_A2
	.export		_A3
	.export		_A4
	.export		_ROOMS
	.export		_PLATFORM
	.export		_METATILES
	.export		_MT_color
	.export		_HUD
	.export		_PALETTE
	.export		_Walk_Moves
	.export		_MetaSprite_Y
	.export		_MetaSprite_Tile_Right
	.export		_MetaSprite_Attrib_Right
	.export		_MetaSprite_X
	.export		_MetaSprite_Tile_Left
	.export		_MetaSprite_Attrib_Left
	.export		_All_Off
	.export		_All_On
	.export		_Reset_Scroll
	.export		_Load_Palette
	.export		_update_Sprites
	.export		_Collision_Down
	.export		_move_logic
	.export		_Do_Buffer
	.export		_Do_Buffer2
	.export		_Do_Buffer3
	.export		_Draw_Background
	.export		_Set_Sprite_Zero
	.export		_Load_HUD
	.export		_Should_We_Buffer
	.export		_New_Room
	.import		_memcpy
	.import		_Wait_Vblank
	.import		_Get_Input
	.import		_Sprite_Zero
	.import		_Super_Fast_Write_PPU
	.import		_Super_Fast_Write_PPU2
	.export		_Buffer_Tiles
	.export		_Buffer_Tiles2
	.export		_TestLabel
	.export		_main

.segment	"RODATA"

_A1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_A2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_A3:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_A4:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_ROOMS:
	.addr	_A1
	.addr	_A2
	.addr	_A3
	.addr	_A4
_PLATFORM:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_METATILES:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$05
	.byte	$06
	.byte	$15
	.byte	$16
	.byte	$06
	.byte	$06
	.byte	$16
	.byte	$16
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
	.byte	$15
	.byte	$16
	.byte	$15
	.byte	$16
	.byte	$16
	.byte	$16
	.byte	$16
	.byte	$16
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$15
	.byte	$16
	.byte	$18
	.byte	$19
	.byte	$16
	.byte	$16
	.byte	$19
	.byte	$19
	.byte	$16
	.byte	$17
	.byte	$19
	.byte	$1A
_MT_color:
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_HUD:
	.byte	$54,$45,$53,$54,$20,$53,$50,$52,$49,$54,$45,$20,$5A,$45,$52,$4F
	.byte	$20,$48,$45,$52,$45,$20,$20,$00
_PALETTE:
	.byte	$22
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$39
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$0A
	.byte	$1A
	.byte	$2A
	.byte	$22
	.byte	$37
	.byte	$16
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$15
_Walk_Moves:
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
_MetaSprite_Y:
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
_MetaSprite_Tile_Right:
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$04
	.byte	$05
	.byte	$14
	.byte	$15
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
_MetaSprite_Attrib_Right:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_MetaSprite_X:
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$08
_MetaSprite_Tile_Left:
	.byte	$01
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$13
	.byte	$12
	.byte	$05
	.byte	$04
	.byte	$15
	.byte	$14
	.byte	$07
	.byte	$06
	.byte	$17
	.byte	$16
_MetaSprite_Attrib_Left:
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"OAM"
.segment	"MAP"
.segment	"BSS"
.segment	"ZEROPAGE"
_NMI_flag:
	.res	1,$00
.segment	"ZEROPAGE"
_Frame_Count:
	.res	1,$00
.segment	"ZEROPAGE"
_index:
	.res	1,$00
.segment	"ZEROPAGE"
_index2:
	.res	1,$00
.segment	"ZEROPAGE"
_index3:
	.res	1,$00
.segment	"ZEROPAGE"
_index4:
	.res	1,$00
.segment	"ZEROPAGE"
_X1:
	.res	1,$00
.segment	"ZEROPAGE"
_Y1:
	.res	1,$00
.segment	"ZEROPAGE"
_state:
	.res	1,$00
.segment	"ZEROPAGE"
_state4:
	.res	1,$00
.segment	"ZEROPAGE"
_joypad1:
	.res	1,$00
.segment	"ZEROPAGE"
_joypad1old:
	.res	1,$00
.segment	"ZEROPAGE"
_joypad1test:
	.res	1,$00
.segment	"ZEROPAGE"
_joypad2:
	.res	1,$00
.segment	"ZEROPAGE"
_joypad2old:
	.res	1,$00
.segment	"ZEROPAGE"
_joypad2test:
	.res	1,$00
.segment	"ZEROPAGE"
_Room:
	.res	1,$00
.segment	"ZEROPAGE"
_RoomB:
	.res	1,$00
.segment	"ZEROPAGE"
_RoomPlus:
	.res	1,$00
.segment	"ZEROPAGE"
_Room_Address:
	.res	2,$00
.segment	"ZEROPAGE"
_Horiz_scroll:
	.res	1,$00
.segment	"ZEROPAGE"
_Horiz_scroll_Old:
	.res	1,$00
.segment	"ZEROPAGE"
_Horiz_scroll_Plus:
	.res	1,$00
.segment	"ZEROPAGE"
_Scroll_Adjusted_X:
	.res	2,$00
.segment	"ZEROPAGE"
_Nametable:
	.res	1,$00
.segment	"ZEROPAGE"
_NametableB:
	.res	1,$00
.segment	"ZEROPAGE"
_Nametable_Plus:
	.res	1,$00
.segment	"ZEROPAGE"
_walk_count:
	.res	1,$00
.segment	"ZEROPAGE"
_X_speed:
	.res	1,$00
.segment	"ZEROPAGE"
_Y_speed:
	.res	1,$00
.segment	"ZEROPAGE"
_direction:
	.res	1,$00
.segment	"ZEROPAGE"
_collision_Index:
	.res	1,$00
.segment	"ZEROPAGE"
_high_byte:
	.res	1,$00
.segment	"ZEROPAGE"
_collision:
	.res	1,$00
.segment	"ZEROPAGE"
_temp:
	.res	1,$00
.segment	"ZEROPAGE"
_temp2:
	.res	1,$00
.segment	"ZEROPAGE"
_temp3:
	.res	1,$00
.segment	"ZEROPAGE"
_temp4:
	.res	1,$00
.segment	"ZEROPAGE"
_PPU_ADDRESS_High:
	.res	1,$00
.segment	"ZEROPAGE"
_PPU_ADDRESS_Low:
	.res	1,$00
.segment	"ZEROPAGE"
_A:
	.res	1,$00
.segment	"ZEROPAGE"
_PPU_flag:
	.res	1,$00
.segment	"ZEROPAGE"
_PPU_flag2:
	.res	1,$00
.segment	"ZEROPAGE"
_dummy:
	.res	1,$00
.segment	"OAM"
_SPRITE_ZERO:
	.res	4,$00
.segment	"OAM"
_SPRITES:
	.res	252,$00
.segment	"MAP"
_C_MAP:
	.res	256,$00
.segment	"MAP"
_C_MAP2:
	.res	256,$00
.segment	"BSS"
_BUFFER1:
	.res	32,$00
.segment	"BSS"
_BUFFER2:
	.res	32,$00
.segment	"BSS"
_BUFFER3:
	.res	32,$00
.segment	"BSS"
_BUFFER4:
	.res	32,$00
.segment	"BSS"
_BUFFER5:
	.res	8,$00
.segment	"BSS"
_BUFFER6:
	.res	8,$00
.segment	"BSS"
_BUFFER7:
	.res	8,$00

; ---------------------------------------------------------------
; void __near__ All_Off (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_Off: near

	.dbg	func, "All_Off", "00", extern, "_All_Off"

.segment	"CODE"

;
; PPU_CTRL = 0;
;
	.dbg	line, "lesson11.c", 124
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0;
;
	.dbg	line, "lesson11.c", 125
	sta     $2001
;
; }
;
	.dbg	line, "lesson11.c", 126
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ All_On (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_On: near

	.dbg	func, "All_On", "00", extern, "_All_On"

.segment	"CODE"

;
; PPU_CTRL = 0x94; // screen is on, NMI on
;
	.dbg	line, "lesson11.c", 129
	lda     #$94
	sta     $2000
;
; PPU_MASK = 0x1e; 
;
	.dbg	line, "lesson11.c", 130
	lda     #$1E
	sta     $2001
;
; }
;
	.dbg	line, "lesson11.c", 131
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ Reset_Scroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Reset_Scroll: near

	.dbg	func, "Reset_Scroll", "00", extern, "_Reset_Scroll"

.segment	"CODE"

;
; PPU_ADDRESS = 0;
;
	.dbg	line, "lesson11.c", 134
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS = 0;
;
	.dbg	line, "lesson11.c", 135
	sta     $2006
;
; SCROLL = 0;
;
	.dbg	line, "lesson11.c", 136
	sta     $2005
;
; SCROLL = 0;
;
	.dbg	line, "lesson11.c", 137
	sta     $2005
;
; }
;
	.dbg	line, "lesson11.c", 138
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ Load_Palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Load_Palette: near

	.dbg	func, "Load_Palette", "00", extern, "_Load_Palette"

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	.dbg	line, "lesson11.c", 141
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	.dbg	line, "lesson11.c", 142
	lda     #$00
	sta     $2006
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	.dbg	line, "lesson11.c", 143
	sta     _index
L0851:	lda     _index
	cmp     #$20
	bcs     L0601
;
; PPU_DATA = PALETTE[index];
;
	.dbg	line, "lesson11.c", 144
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	.dbg	line, "lesson11.c", 143
	inc     _index
	jmp     L0851
;
; }
;
	.dbg	line, "lesson11.c", 146
L0601:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ update_Sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_Sprites: near

	.dbg	func, "update_Sprites", "00", extern, "_update_Sprites"

.segment	"CODE"

;
; state4 = state << 2; // shift left 2 = multiply 4
;
	.dbg	line, "lesson11.c", 150
	lda     _state
	asl     a
	asl     a
	sta     _state4
;
; index4 = 0;
;
	.dbg	line, "lesson11.c", 151
	lda     #$00
	sta     _index4
;
; if (direction == 0){ // right
;
	.dbg	line, "lesson11.c", 152
	lda     _direction
	jne     L0859
;
; for (index = 0; index < 4; ++index ){
;
	.dbg	line, "lesson11.c", 153
	sta     _index
L0858:	lda     _index
	cmp     #$04
	bcc     L085B
;
; }
;
	.dbg	line, "lesson11.c", 176
	rts
;
; SPRITES[index4] = MetaSprite_Y[index] + Y1; // relative y + master y
;
	.dbg	line, "lesson11.c", 154
L085B:	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L061F
	inx
L061F:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Y,y
	clc
	adc     _Y1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	.dbg	line, "lesson11.c", 155
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Tile_Right[index + state4]; // tile numbers
;
	.dbg	line, "lesson11.c", 156
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0626
	inx
L0626:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _index
	clc
	adc     _state4
	bcc     L0853
	inx
L0853:	sta     ptr1
	txa
	clc
	adc     #>(_MetaSprite_Tile_Right)
	sta     ptr1+1
	ldy     #<(_MetaSprite_Tile_Right)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	.dbg	line, "lesson11.c", 157
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Attrib_Right[index]; // attributes, all zero here
;
	.dbg	line, "lesson11.c", 158
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L062C
	inx
L062C:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Attrib_Right,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	.dbg	line, "lesson11.c", 159
	inc     _index4
;
; SPRITES[index4] = MetaSprite_X[index] + X1; // relative x + master x
;
	.dbg	line, "lesson11.c", 160
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0633
	inx
L0633:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_X,y
	clc
	adc     _X1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	.dbg	line, "lesson11.c", 161
	inc     _index4
;
; for (index = 0; index < 4; ++index ){
;
	.dbg	line, "lesson11.c", 153
	inc     _index
	jmp     L0858
;
; for (index = 0; index < 4; ++index ){
;
	.dbg	line, "lesson11.c", 165
L0859:	lda     #$00
	sta     _index
L085A:	lda     _index
	cmp     #$04
	bcc     L085C
;
; }
;
	.dbg	line, "lesson11.c", 176
	rts
;
; SPRITES[index4] = MetaSprite_Y[index] + Y1; // relative y + master y
;
	.dbg	line, "lesson11.c", 166
L085C:	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0643
	inx
L0643:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Y,y
	clc
	adc     _Y1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	.dbg	line, "lesson11.c", 167
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Tile_Left[index + state4]; // tile numbers
;
	.dbg	line, "lesson11.c", 168
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L064A
	inx
L064A:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _index
	clc
	adc     _state4
	bcc     L0856
	inx
L0856:	sta     ptr1
	txa
	clc
	adc     #>(_MetaSprite_Tile_Left)
	sta     ptr1+1
	ldy     #<(_MetaSprite_Tile_Left)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	.dbg	line, "lesson11.c", 169
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Attrib_Left[index]; // attributes, all zero here
;
	.dbg	line, "lesson11.c", 170
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0650
	inx
L0650:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Attrib_Left,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	.dbg	line, "lesson11.c", 171
	inc     _index4
;
; SPRITES[index4] = MetaSprite_X[index] + X1; // relative x + master x
;
	.dbg	line, "lesson11.c", 172
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0657
	inx
L0657:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_X,y
	clc
	adc     _X1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	.dbg	line, "lesson11.c", 173
	inc     _index4
;
; for (index = 0; index < 4; ++index ){
;
	.dbg	line, "lesson11.c", 165
	inc     _index
	jmp     L085A
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ Collision_Down (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Collision_Down: near

	.dbg	func, "Collision_Down", "00", extern, "_Collision_Down"

.segment	"CODE"

;
; if (NametableB == 0){ // first collision map
;
	.dbg	line, "lesson11.c", 180
	lda     _NametableB
	bne     L065D
;
; temp = C_MAP[collision_Index];
;
	.dbg	line, "lesson11.c", 181
	ldy     _collision_Index
	lda     _C_MAP,y
;
; else { // second collision map
;
	.dbg	line, "lesson11.c", 184
	jmp     L0862
;
; temp = C_MAP2[collision_Index];
;
	.dbg	line, "lesson11.c", 185
L065D:	ldy     _collision_Index
	lda     _C_MAP2,y
L0862:	sta     _temp
;
; collision += PLATFORM[temp];
;
	.dbg	line, "lesson11.c", 186
	ldy     _temp
	lda     _PLATFORM,y
	clc
	adc     _collision
	sta     _collision
;
; }
;
	.dbg	line, "lesson11.c", 188
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ move_logic (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_logic: near

	.dbg	func, "move_logic", "00", extern, "_move_logic"

.segment	"CODE"

;
; if ((joypad1 & (RIGHT|LEFT)) == 0){ // no L or R
;
	.dbg	line, "lesson11.c", 195
	lda     _joypad1
	and     #$03
	bne     L086E
;
; walk_count = 0;
;
	.dbg	line, "lesson11.c", 196
	sta     _walk_count
;
; if (X_speed >= 0){ // if positive, going right
;
	.dbg	line, "lesson11.c", 198
	ldx     _X_speed
	bmi     L0678
;
; if (X_speed >= 4){
;
	.dbg	line, "lesson11.c", 199
	lda     _X_speed
	sec
	sbc     #$04
	bvs     L067E
	eor     #$80
L067E:	asl     a
	lda     #$00
	bcc     L086D
;
; X_speed -= 4;
;
	.dbg	line, "lesson11.c", 200
	lda     _X_speed
	sec
	sbc     #$04
	sta     _X_speed
	bpl     L086E
;
; else {
;
	.dbg	line, "lesson11.c", 202
	jmp     L086E
;
; if (X_speed <= (-4)){ // -4
;
	.dbg	line, "lesson11.c", 207
L0678:	lda     _X_speed
	sec
	sbc     #$FD
	bvc     L068A
	eor     #$80
L068A:	asl     a
	lda     #$00
	bcc     L086D
;
; X_speed +=4;
;
	.dbg	line, "lesson11.c", 208
	lda     #$04
	clc
	adc     _X_speed
	sta     _X_speed
	bpl     L086E
;
; else {
;
	.dbg	line, "lesson11.c", 210
	jmp     L086E
;
; X_speed = 0; // just stop
;
	.dbg	line, "lesson11.c", 211
L086D:	sta     _X_speed
;
; if ((joypad1 & RIGHT) != 0){
;
	.dbg	line, "lesson11.c", 216
L086E:	lda     _joypad1
	and     #$01
	beq     L06A2
;
; ++walk_count;
;
	.dbg	line, "lesson11.c", 217
	inc     _walk_count
;
; direction = 0;
;
	.dbg	line, "lesson11.c", 218
	lda     #$00
	sta     _direction
;
; if (X_speed >= 0){ // going right
;
	.dbg	line, "lesson11.c", 219
	ldx     _X_speed
	bmi     L0698
;
; X_speed += 2;
;
	.dbg	line, "lesson11.c", 220
	lda     #$02
	clc
	adc     _X_speed
	sta     _X_speed
	bpl     L06A2
;
; else { // going left
;
	.dbg	line, "lesson11.c", 222
	jmp     L06A2
;
; X_speed += 8; // just stop
;
	.dbg	line, "lesson11.c", 223
L0698:	lda     #$08
	clc
	adc     _X_speed
	sta     _X_speed
;
; if (X_speed >= 0)
;
	.dbg	line, "lesson11.c", 224
	tax
	bmi     L06A2
;
; X_speed = 0;
;
	.dbg	line, "lesson11.c", 225
	lda     #$00
	sta     _X_speed
;
; TestLabel(); 
;
	.dbg	line, "lesson11.c", 229
L06A2:	jsr     _TestLabel
;
; if ((joypad1 & LEFT) != 0){
;
	.dbg	line, "lesson11.c", 231
	lda     _joypad1
	and     #$02
	beq     L0872
;
; ++walk_count;
;
	.dbg	line, "lesson11.c", 232
	inc     _walk_count
;
; direction = 1;
;
	.dbg	line, "lesson11.c", 233
	lda     #$01
	sta     _direction
;
; if (X_speed <= 0){ // was <, produced error, couldn't go left
;
	.dbg	line, "lesson11.c", 234
	lda     _X_speed
	sec
	sbc     #$01
	bvc     L06B2
	eor     #$80
L06B2:	bpl     L0870
;
; X_speed -= 2;
;
	.dbg	line, "lesson11.c", 235
	lda     _X_speed
	sec
	sbc     #$02
	sta     _X_speed
	bpl     L0872
;
; else { // going right
;
	.dbg	line, "lesson11.c", 237
	jmp     L0872
;
; X_speed -= 8;//just stop
;
	.dbg	line, "lesson11.c", 238
L0870:	lda     _X_speed
	sec
	sbc     #$08
	sta     _X_speed
;
; if (X_speed < 0)
;
	.dbg	line, "lesson11.c", 239
	asl     a
	bcc     L0872
;
; X_speed = 0;
;
	.dbg	line, "lesson11.c", 240
	lda     #$00
	sta     _X_speed
;
; NametableB = Nametable;
;
	.dbg	line, "lesson11.c", 249
L0872:	lda     _Nametable
	sta     _NametableB
;
; Scroll_Adjusted_X = (X1 + Horiz_scroll + 3); //left
;
	.dbg	line, "lesson11.c", 250
	ldx     #$00
	lda     _X1
	clc
	adc     _Horiz_scroll
	bcc     L0868
	inx
	clc
L0868:	adc     #$03
	bcc     L06C4
	inx
L06C4:	sta     _Scroll_Adjusted_X
	stx     _Scroll_Adjusted_X+1
;
; high_byte = Scroll_Adjusted_X >> 8;
;
	.dbg	line, "lesson11.c", 251
	lda     _Scroll_Adjusted_X+1
	sta     _high_byte
;
; if (high_byte != 0){ // if H scroll + Sprite X > 255, then we should use
;
	.dbg	line, "lesson11.c", 252
	lda     _high_byte
	beq     L0873
;
; ++NametableB;    // the other nametable's collision map
;
	.dbg	line, "lesson11.c", 253
	inc     _NametableB
;
; NametableB &= 1; // keep it 0 or 1
;
	.dbg	line, "lesson11.c", 254
	lda     _NametableB
	and     #$01
	sta     _NametableB
;
; collision_Index = (((char)Scroll_Adjusted_X>>4) + ((Y1+16) & 0xf0)); // bottom left
;
	.dbg	line, "lesson11.c", 257
L0873:	lda     _Scroll_Adjusted_X
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _Y1
	clc
	adc     #$10
	and     #$F0
	clc
	adc     ptr1
	sta     _collision_Index
;
; collision = 0;
;
	.dbg	line, "lesson11.c", 258
	lda     #$00
	sta     _collision
;
; Collision_Down();
;
	.dbg	line, "lesson11.c", 259
	jsr     _Collision_Down
;
; NametableB = Nametable;
;
	.dbg	line, "lesson11.c", 263
	lda     _Nametable
	sta     _NametableB
;
; Scroll_Adjusted_X = (X1 + Horiz_scroll + 12); // right
;
	.dbg	line, "lesson11.c", 264
	ldx     #$00
	lda     _X1
	clc
	adc     _Horiz_scroll
	bcc     L0869
	inx
	clc
L0869:	adc     #$0C
	bcc     L06DB
	inx
L06DB:	sta     _Scroll_Adjusted_X
	stx     _Scroll_Adjusted_X+1
;
; high_byte = Scroll_Adjusted_X >> 8;
;
	.dbg	line, "lesson11.c", 265
	lda     _Scroll_Adjusted_X+1
	sta     _high_byte
;
; if (high_byte != 0){ // if H scroll + Sprite X > 255, then we should use
;
	.dbg	line, "lesson11.c", 266
	lda     _high_byte
	beq     L0874
;
; ++NametableB;    // the other nametable's collision map
;
	.dbg	line, "lesson11.c", 267
	inc     _NametableB
;
; NametableB &= 1; // keep it 0 or 1
;
	.dbg	line, "lesson11.c", 268
	lda     _NametableB
	and     #$01
	sta     _NametableB
;
; collision_Index = (((char)Scroll_Adjusted_X>>4) + ((Y1+16) & 0xf0)); // bottom right
;
	.dbg	line, "lesson11.c", 270
L0874:	lda     _Scroll_Adjusted_X
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _Y1
	clc
	adc     #$10
	and     #$F0
	clc
	adc     ptr1
	sta     _collision_Index
;
; Collision_Down();
;
	.dbg	line, "lesson11.c", 271
	jsr     _Collision_Down
;
; if ((Y1 & 0x0f) > 1) // only platform collide if nearly aligned to a metatile
;
	.dbg	line, "lesson11.c", 273
	lda     _Y1
	and     #$0F
	cmp     #$02
	bcc     L0875
;
; collision = 0;
;
	.dbg	line, "lesson11.c", 274
	lda     #$00
	sta     _collision
;
; if (collision == 0){
;
	.dbg	line, "lesson11.c", 276
L0875:	lda     _collision
	bne     L0876
;
; Y_speed += 2; // gravity
;
	.dbg	line, "lesson11.c", 277
	lda     #$02
	clc
	adc     _Y_speed
	sta     _Y_speed
	bpl     L0877
;
; else {
;
	.dbg	line, "lesson11.c", 279
	jmp     L0877
;
; Y_speed = 0; // collision = stop falling
;
	.dbg	line, "lesson11.c", 280
L0876:	lda     #$00
	sta     _Y_speed
;
; Y1 &= 0xf0;  // align to the metatile
;
	.dbg	line, "lesson11.c", 281
	lda     _Y1
	and     #$F0
	sta     _Y1
;
; if (collision > 0){
;
	.dbg	line, "lesson11.c", 285
L0877:	lda     _collision
	beq     L087B
;
; if (((joypad1 & A_BUTTON) != 0) && ((joypad1old & A_BUTTON) == 0)){
;
	.dbg	line, "lesson11.c", 286
	lda     _joypad1
	and     #$80
	beq     L087B
	lda     _joypad1old
	and     #$80
	bne     L087B
;
; Y_speed = -0x38; // -0x38
;
	.dbg	line, "lesson11.c", 287
	lda     #$C8
	sta     _Y_speed
;
; if (X_speed >= 0){ // going right
;
	.dbg	line, "lesson11.c", 292
L087B:	ldx     _X_speed
	bmi     L0708
;
; if (X_speed > 0x20)
;
	.dbg	line, "lesson11.c", 293
	lda     _X_speed
	sec
	sbc     #$21
	bvs     L070E
	eor     #$80
L070E:	bpl     L087C
;
; X_speed = 0x20;
;
	.dbg	line, "lesson11.c", 294
	lda     #$20
;
; else {
;
	.dbg	line, "lesson11.c", 296
	jmp     L0865
;
; if (X_speed < -0x20)
;
	.dbg	line, "lesson11.c", 297
L0708:	lda     _X_speed
	sec
	sbc     #$E0
	bvc     L0715
	eor     #$80
L0715:	bpl     L087C
;
; X_speed = -0x20; // -0x20
;
	.dbg	line, "lesson11.c", 298
	lda     #$E0
L0865:	sta     _X_speed
;
; if (Y_speed >= 0){
;
	.dbg	line, "lesson11.c", 301
L087C:	ldx     _Y_speed
	bmi     L087D
;
; if (Y_speed > 0x20)
;
	.dbg	line, "lesson11.c", 302
	lda     _Y_speed
	sec
	sbc     #$21
	bvs     L071E
	eor     #$80
L071E:	bpl     L087D
;
; Y_speed = 0x20;
;
	.dbg	line, "lesson11.c", 303
	lda     #$20
	sta     _Y_speed
;
; Horiz_scroll_Old = Horiz_scroll;
;
	.dbg	line, "lesson11.c", 307
L087D:	lda     _Horiz_scroll
	sta     _Horiz_scroll_Old
;
; if (X_speed >= 0){ // right
;
	.dbg	line, "lesson11.c", 308
	ldx     _X_speed
	bmi     L0723
;
; if (X1 < 0x80){
;
	.dbg	line, "lesson11.c", 309
	ldx     #$00
	lda     _X1
	cmp     #$80
	bcs     L087E
;
; X1 += (X_speed >> 4); // use the high nibble
;
	.dbg	line, "lesson11.c", 310
	lda     _X_speed
	bpl     L072B
	dex
L072B:	jsr     asrax4
	clc
	adc     _X1
	sta     _X1
;
; if (X1 > 0x80)
;
	.dbg	line, "lesson11.c", 311
	cmp     #$81
	bcc     L087F
;
; X1 = 0x80;
;
	.dbg	line, "lesson11.c", 312
	lda     #$80
;
; else{
;
	.dbg	line, "lesson11.c", 314
	jmp     L0866
;
; Horiz_scroll += (X_speed >> 4); // use the high nibble
;
	.dbg	line, "lesson11.c", 315
L087E:	lda     _X_speed
	bpl     L0734
	dex
L0734:	jsr     asrax4
	clc
	adc     _Horiz_scroll
	sta     _Horiz_scroll
;
; if (Horiz_scroll_Old > Horiz_scroll){ // if pass 0, switch nametables
;
	.dbg	line, "lesson11.c", 316
	lda     _Horiz_scroll_Old
	sec
	sbc     _Horiz_scroll
	bcc     L087F
	beq     L087F
;
; ++Nametable;
;
	.dbg	line, "lesson11.c", 317
	inc     _Nametable
;
; ++Room;
;
	.dbg	line, "lesson11.c", 318
	inc     _Room
;
; else { // going left
;
	.dbg	line, "lesson11.c", 322
	jmp     L087F
;
; X1 += (X_speed >>4); // use the high nibble
;
	.dbg	line, "lesson11.c", 323
L0723:	ldx     #$00
	lda     _X_speed
	bpl     L073D
	dex
L073D:	jsr     asrax4
	clc
	adc     _X1
	sta     _X1
;
; if (X1 > 0xc0)
;
	.dbg	line, "lesson11.c", 324
	cmp     #$C1
	bcc     L087F
;
; X1 = 0;
;
	.dbg	line, "lesson11.c", 325
	lda     #$00
L0866:	sta     _X1
;
; Nametable &= 1; // keep it 1 or 0
;
	.dbg	line, "lesson11.c", 328
L087F:	lda     _Nametable
	and     #$01
	sta     _Nametable
;
; Room &= 3; // keep it 0-3
;
	.dbg	line, "lesson11.c", 329
	lda     _Room
	and     #$03
	sta     _Room
;
; Y1 += (Y_speed >> 4); // use the high nibble
;
	.dbg	line, "lesson11.c", 335
	ldx     #$00
	lda     _Y_speed
	bpl     L0751
	dex
L0751:	jsr     asrax4
	clc
	adc     _Y1
	sta     _Y1
;
; if (walk_count > 0x1f) // walk_count forced 0-1f
;
	.dbg	line, "lesson11.c", 338
	lda     _walk_count
	cmp     #$20
	ldx     #$00
	bcc     L0880
;
; walk_count = 0;
;
	.dbg	line, "lesson11.c", 339
	stx     _walk_count
;
; state = Walk_Moves[(walk_count >> 3)]; // if not jumping
;
	.dbg	line, "lesson11.c", 341
L0880:	lda     _walk_count
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	txa
	clc
	adc     #>(_Walk_Moves)
	sta     ptr1+1
	ldy     #<(_Walk_Moves)
	lda     (ptr1),y
	sta     _state
;
; if (Y_speed < 0) // negative = jumping
;
	.dbg	line, "lesson11.c", 343
	lda     _Y_speed
	asl     a
	bcc     L075A
;
; state = 3;
;
	.dbg	line, "lesson11.c", 344
	lda     #$03
	sta     _state
;
; }
;
	.dbg	line, "lesson11.c", 345
L075A:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ Do_Buffer (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Do_Buffer: near

	.dbg	func, "Do_Buffer", "00", extern, "_Do_Buffer"

.segment	"CODE"

;
; Buffer_Tiles();
;
	.dbg	line, "lesson11.c", 351
	jsr     _Buffer_Tiles
;
; Horiz_scroll_Plus += 0x10;
;
	.dbg	line, "lesson11.c", 353
	lda     #$10
	clc
	adc     _Horiz_scroll_Plus
	sta     _Horiz_scroll_Plus
;
; Buffer_Tiles2();
;
	.dbg	line, "lesson11.c", 355
	jsr     _Buffer_Tiles2
;
; Horiz_scroll_Plus -= 0x10;
;
	.dbg	line, "lesson11.c", 357
	lda     _Horiz_scroll_Plus
	sec
	sbc     #$10
	sta     _Horiz_scroll_Plus
;
; }
;
	.dbg	line, "lesson11.c", 358
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ Do_Buffer2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Do_Buffer2: near

	.dbg	func, "Do_Buffer2", "00", extern, "_Do_Buffer2"

.segment	"CODE"

;
; if (Nametable_Plus == 0){ // write to right screen
;
	.dbg	line, "lesson11.c", 362
	lda     _Nametable_Plus
	bne     L0889
;
; PPU_ADDRESS_High = 0x24;
;
	.dbg	line, "lesson11.c", 363
	lda     #$24
;
; else { // write to the left screen
;
	.dbg	line, "lesson11.c", 365
	jmp     L0888
;
; PPU_ADDRESS_High = 0x20;
;
	.dbg	line, "lesson11.c", 366
L0889:	lda     #$20
L0888:	sta     _PPU_ADDRESS_High
;
; PPU_ADDRESS_Low = ((Horiz_scroll_Plus&0xf0) >> 3) + 0x80; // +80 because we're skipping the top
;
	.dbg	line, "lesson11.c", 368
	lda     _Horiz_scroll_Plus
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _PPU_ADDRESS_Low
;
; PPU_ADDRESS = PPU_ADDRESS_High;
;
	.dbg	line, "lesson11.c", 369
	lda     _PPU_ADDRESS_High
	sta     $2006
;
; PPU_ADDRESS = PPU_ADDRESS_Low;
;
	.dbg	line, "lesson11.c", 370
	lda     _PPU_ADDRESS_Low
	sta     $2006
;
; Super_Fast_Write_PPU();
;
	.dbg	line, "lesson11.c", 371
	jmp     _Super_Fast_Write_PPU
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ Do_Buffer3 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Do_Buffer3: near

	.dbg	func, "Do_Buffer3", "00", extern, "_Do_Buffer3"

.segment	"CODE"

;
; if (Nametable_Plus == 0){ // write to right screen
;
	.dbg	line, "lesson11.c", 376
	lda     _Nametable_Plus
	bne     L088B
;
; PPU_ADDRESS_High = 0x24;
;
	.dbg	line, "lesson11.c", 377
	lda     #$24
;
; else { // write to the left screen
;
	.dbg	line, "lesson11.c", 379
	jmp     L088A
;
; PPU_ADDRESS_High = 0x20;
;
	.dbg	line, "lesson11.c", 380
L088B:	lda     #$20
L088A:	sta     _PPU_ADDRESS_High
;
; PPU_ADDRESS_Low = ((Horiz_scroll_Plus&0xf0) >> 3) + 0x80; // +80 because we're skipping the top
;
	.dbg	line, "lesson11.c", 382
	lda     _Horiz_scroll_Plus
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _PPU_ADDRESS_Low
;
; PPU_ADDRESS = PPU_ADDRESS_High;
;
	.dbg	line, "lesson11.c", 383
	lda     _PPU_ADDRESS_High
	sta     $2006
;
; PPU_ADDRESS = PPU_ADDRESS_Low;
;
	.dbg	line, "lesson11.c", 384
	lda     _PPU_ADDRESS_Low
	sta     $2006
;
; Super_Fast_Write_PPU2(); 
;
	.dbg	line, "lesson11.c", 385
	jmp     _Super_Fast_Write_PPU2
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Background: near

	.dbg	func, "Draw_Background", "00", extern, "_Draw_Background"

.segment	"CODE"

;
; memcpy (C_MAP, A1, 240);
;
	.dbg	line, "lesson11.c", 392
	lda     #<(_C_MAP)
	ldx     #>(_C_MAP)
	jsr     pushax
	lda     #<(_A1)
	ldx     #>(_A1)
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; memcpy (C_MAP2, A2, 240);
;
	.dbg	line, "lesson11.c", 393
	lda     #<(_C_MAP2)
	ldx     #>(_C_MAP2)
	jsr     pushax
	lda     #<(_A2)
	ldx     #>(_A2)
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; Nametable_Plus = 1;
;
	.dbg	line, "lesson11.c", 396
	lda     #$01
	sta     _Nametable_Plus
;
; PPU_CTRL = 4; // sets to downward increments when writing to PPU
;
	.dbg	line, "lesson11.c", 397
	lda     #$04
	sta     $2000
;
; for (A = 0; A < 8; ++A){
;
	.dbg	line, "lesson11.c", 398
	lda     #$00
	sta     _A
L088C:	lda     _A
	cmp     #$08
	bcs     L088D
;
; Do_Buffer(); // fill buffer
;
	.dbg	line, "lesson11.c", 399
	jsr     _Do_Buffer
;
; Do_Buffer2(); // draw to ppu
;
	.dbg	line, "lesson11.c", 400
	jsr     _Do_Buffer2
;
; Horiz_scroll_Plus += 0x10;
;
	.dbg	line, "lesson11.c", 401
	lda     #$10
	clc
	adc     _Horiz_scroll_Plus
	sta     _Horiz_scroll_Plus
;
; Do_Buffer3(); // draw to ppu
;
	.dbg	line, "lesson11.c", 402
	jsr     _Do_Buffer3
;
; Horiz_scroll_Plus += 0x10;
;
	.dbg	line, "lesson11.c", 403
	lda     #$10
	clc
	adc     _Horiz_scroll_Plus
	sta     _Horiz_scroll_Plus
;
; for (A = 0; A < 8; ++A){
;
	.dbg	line, "lesson11.c", 398
	inc     _A
	jmp     L088C
;
; --Nametable_Plus;
;
	.dbg	line, "lesson11.c", 405
L088D:	dec     _Nametable_Plus
;
; for (A = 0; A < 8; ++A){
;
	.dbg	line, "lesson11.c", 406
	lda     #$00
	sta     _A
L088E:	lda     _A
	cmp     #$08
	bcs     L07AD
;
; Do_Buffer(); // fill buffer
;
	.dbg	line, "lesson11.c", 407
	jsr     _Do_Buffer
;
; Do_Buffer2(); // draw to ppu
;
	.dbg	line, "lesson11.c", 408
	jsr     _Do_Buffer2
;
; Horiz_scroll_Plus += 0x10;
;
	.dbg	line, "lesson11.c", 409
	lda     #$10
	clc
	adc     _Horiz_scroll_Plus
	sta     _Horiz_scroll_Plus
;
; Do_Buffer3(); // draw to ppu
;
	.dbg	line, "lesson11.c", 410
	jsr     _Do_Buffer3
;
; Horiz_scroll_Plus += 0x10;
;
	.dbg	line, "lesson11.c", 411
	lda     #$10
	clc
	adc     _Horiz_scroll_Plus
	sta     _Horiz_scroll_Plus
;
; for (A = 0; A < 8; ++A){
;
	.dbg	line, "lesson11.c", 406
	inc     _A
	jmp     L088E
;
; }
;
	.dbg	line, "lesson11.c", 413
L07AD:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ Set_Sprite_Zero (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Set_Sprite_Zero: near

	.dbg	func, "Set_Sprite_Zero", "00", extern, "_Set_Sprite_Zero"

.segment	"CODE"

;
; SPRITE_ZERO[0] = 0x16; // y
;
	.dbg	line, "lesson11.c", 417
	lda     #$16
	sta     _SPRITE_ZERO
;
; SPRITE_ZERO[1] = 0x30; // tile
;
	.dbg	line, "lesson11.c", 418
	lda     #$30
	sta     _SPRITE_ZERO+1
;
; SPRITE_ZERO[2] = 0;  // attributes
;
	.dbg	line, "lesson11.c", 419
	lda     #$00
	sta     _SPRITE_ZERO+2
;
; SPRITE_ZERO[3] = 0xd0; // x
;
	.dbg	line, "lesson11.c", 420
	lda     #$D0
	sta     _SPRITE_ZERO+3
;
; }
;
	.dbg	line, "lesson11.c", 421
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ Load_HUD (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Load_HUD: near

	.dbg	func, "Load_HUD", "00", extern, "_Load_HUD"

.segment	"CODE"

;
; PPU_ADDRESS = 0x20;
;
	.dbg	line, "lesson11.c", 425
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x42;
;
	.dbg	line, "lesson11.c", 426
	lda     #$42
	sta     $2006
;
; for (index = 0;index < sizeof(HUD);++index){
;
	.dbg	line, "lesson11.c", 427
	lda     #$00
	sta     _index
L088F:	lda     _index
	cmp     #$18
	bcs     L0890
;
; PPU_DATA = HUD[index];
;
	.dbg	line, "lesson11.c", 428
	ldy     _index
	lda     _HUD,y
	sta     $2007
;
; for (index = 0;index < sizeof(HUD);++index){
;
	.dbg	line, "lesson11.c", 427
	inc     _index
	jmp     L088F
;
; PPU_DATA = 3;
;
	.dbg	line, "lesson11.c", 430
L0890:	lda     #$03
	sta     $2007
;
; PPU_ADDRESS = 0x23;
;
	.dbg	line, "lesson11.c", 431
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xc0;
;
	.dbg	line, "lesson11.c", 432
	lda     #$C0
	sta     $2006
;
; for (index = 0;index < 8; ++index){
;
	.dbg	line, "lesson11.c", 433
	lda     #$00
	sta     _index
L0891:	lda     _index
	cmp     #$08
	bcs     L07E7
;
; PPU_DATA = 0xaa;
;
	.dbg	line, "lesson11.c", 434
	lda     #$AA
	sta     $2007
;
; for (index = 0;index < 8; ++index){
;
	.dbg	line, "lesson11.c", 433
	inc     _index
	jmp     L0891
;
; }
;
	.dbg	line, "lesson11.c", 436
L07E7:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ Should_We_Buffer (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Should_We_Buffer: near

	.dbg	func, "Should_We_Buffer", "00", extern, "_Should_We_Buffer"

.segment	"CODE"

;
; if (direction == 0){ // right
;
	.dbg	line, "lesson11.c", 446
	lda     _direction
	bne     L07FA
;
; if ((Horiz_scroll_Plus & 0x1e) == 0x02){ // it was == 0
;
	.dbg	line, "lesson11.c", 447
	lda     _Horiz_scroll_Plus
	and     #$1E
	cmp     #$02
	bne     L0892
;
; Buffer_Tiles();
;
	.dbg	line, "lesson11.c", 448
	jsr     _Buffer_Tiles
;
; ++PPU_flag;
;
	.dbg	line, "lesson11.c", 449
	inc     _PPU_flag
;
; if ((Horiz_scroll_Plus & 0x1e) == 0x10){
;
	.dbg	line, "lesson11.c", 451
L0892:	lda     _Horiz_scroll_Plus
	and     #$1E
	cmp     #$10
	bne     L07FA
;
; Buffer_Tiles2();
;
	.dbg	line, "lesson11.c", 452
	jsr     _Buffer_Tiles2
;
; ++PPU_flag2;
;
	.dbg	line, "lesson11.c", 453
	inc     _PPU_flag2
;
; }
;
	.dbg	line, "lesson11.c", 456
L07FA:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ New_Room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_New_Room: near

	.dbg	func, "New_Room", "00", extern, "_New_Room"

.segment	"CODE"

;
; RoomB = RoomPlus + 1;
;
	.dbg	line, "lesson11.c", 463
	lda     _RoomPlus
	clc
	adc     #$01
	sta     _RoomB
;
; RoomB &= 3; // keep it 0-3, we only have 4 rooms
;
	.dbg	line, "lesson11.c", 464
	and     #$03
	sta     _RoomB
;
; Room_Address = ROOMS[RoomB]; // get the address of the room data
;
	.dbg	line, "lesson11.c", 465
	ldx     #$00
	lda     _RoomB
	asl     a
	bcc     L0898
	inx
	clc
L0898:	adc     #<(_ROOMS)
	sta     ptr1
	txa
	adc     #>(_ROOMS)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _Room_Address+1
	dey
	lda     (ptr1),y
	sta     _Room_Address
;
; A = Horiz_scroll_Plus >> 4;
;
	.dbg	line, "lesson11.c", 466
	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _A
;
; if (Nametable_Plus == 0){ // load to right cmap
;
	.dbg	line, "lesson11.c", 467
	lda     _Nametable_Plus
	bne     L089A
;
; for (index=0;index<15;++index){
;
	.dbg	line, "lesson11.c", 468
	sta     _index
	tax
L0899:	lda     _index
	cmp     #$0F
	bcs     L089C
;
; C_MAP2[A] = Room_Address[A];
;
	.dbg	line, "lesson11.c", 469
	lda     #<(_C_MAP2)
	ldx     #>(_C_MAP2)
	clc
	adc     _A
	bcc     L0817
	inx
L0817:	jsr     pushax
	lda     _Room_Address
	ldx     _Room_Address+1
	ldy     _A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; A += 0x10;
;
	.dbg	line, "lesson11.c", 470
	lda     #$10
	clc
	adc     _A
	sta     _A
;
; for (index=0;index<15;++index){
;
	.dbg	line, "lesson11.c", 468
	ldx     #$00
	inc     _index
	jmp     L0899
;
; for (index=0;index<15;++index){
;
	.dbg	line, "lesson11.c", 474
L089A:	tya
	sta     _index
	tax
L089B:	lda     _index
	cmp     #$0F
	bcs     L089C
;
; C_MAP[A] = Room_Address[A];
;
	.dbg	line, "lesson11.c", 475
	lda     #<(_C_MAP)
	ldx     #>(_C_MAP)
	clc
	adc     _A
	bcc     L0827
	inx
L0827:	jsr     pushax
	lda     _Room_Address
	ldx     _Room_Address+1
	ldy     _A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; A += 0x10;
;
	.dbg	line, "lesson11.c", 476
	lda     #$10
	clc
	adc     _A
	sta     _A
;
; for (index=0;index<15;++index){
;
	.dbg	line, "lesson11.c", 474
	ldx     #$00
	inc     _index
	jmp     L089B
;
; A = (Horiz_scroll_Plus+0x10)>> 4;
;
	.dbg	line, "lesson11.c", 482
L089C:	lda     _Horiz_scroll_Plus
	clc
	adc     #$10
	bcc     L082F
	inx
L082F:	jsr     shrax4
	sta     _A
;
; if (Nametable_Plus == 0){ // load to right cmap
;
	.dbg	line, "lesson11.c", 483
	lda     _Nametable_Plus
	bne     L089E
;
; for (index=0;index<15;++index){
;
	.dbg	line, "lesson11.c", 484
	sta     _index
L089D:	lda     _index
	cmp     #$0F
	bcs     L0843
;
; C_MAP2[A] = Room_Address[A];
;
	.dbg	line, "lesson11.c", 485
	lda     #<(_C_MAP2)
	ldx     #>(_C_MAP2)
	clc
	adc     _A
	bcc     L083C
	inx
L083C:	jsr     pushax
	lda     _Room_Address
	ldx     _Room_Address+1
	ldy     _A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; A += 0x10;
;
	.dbg	line, "lesson11.c", 486
	lda     #$10
	clc
	adc     _A
	sta     _A
;
; for (index=0;index<15;++index){
;
	.dbg	line, "lesson11.c", 484
	inc     _index
	jmp     L089D
;
; for (index=0;index<15;++index){
;
	.dbg	line, "lesson11.c", 490
L089E:	lda     #$00
	sta     _index
L089F:	lda     _index
	cmp     #$0F
	bcs     L0843
;
; C_MAP[A] = Room_Address[A];
;
	.dbg	line, "lesson11.c", 491
	lda     #<(_C_MAP)
	ldx     #>(_C_MAP)
	clc
	adc     _A
	bcc     L084C
	inx
L084C:	jsr     pushax
	lda     _Room_Address
	ldx     _Room_Address+1
	ldy     _A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; A += 0x10;
;
	.dbg	line, "lesson11.c", 492
	lda     #$10
	clc
	adc     _A
	sta     _A
;
; for (index=0;index<15;++index){
;
	.dbg	line, "lesson11.c", 490
	inc     _index
	jmp     L089F
;
; }
;
	.dbg	line, "lesson11.c", 495
L0843:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ Buffer_Tiles (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Buffer_Tiles: near

	.dbg	func, "Buffer_Tiles", "00", extern, "_Buffer_Tiles"

.segment	"CODE"

;
; index = 2;  // will be skipping the top 2 metatiles, it's the HUD
;
	.dbg	line, "BufferMT.c", 5
	lda     #$02
	sta     _index
;
; index2 = 0;
;
	.dbg	line, "BufferMT.c", 6
	lda     #$00
	sta     _index2
;
; index3 = 0;
;
	.dbg	line, "BufferMT.c", 7
	tax
	sta     _index3
;
; while (index < 15){ 
;
	.dbg	line, "BufferMT.c", 8
	jmp     L08A5
;
; if (Nametable_Plus == 0){ // drawing to the opposite screen that we're on
;
	.dbg	line, "BufferMT.c", 9
L08A2:	lda     _Nametable_Plus
	bne     L08A3
;
; temp = C_MAP2[(Horiz_scroll_Plus>>4) + (index<<4)]; // get the metatile
;
	.dbg	line, "BufferMT.c", 10
	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP2)
	sta     ptr1+1
	ldy     #<(_C_MAP2)
;
; else{
;
	.dbg	line, "BufferMT.c", 12
	jmp     L08A6
;
; temp = C_MAP[(Horiz_scroll_Plus>>4) + (index<<4)]; // get the metatile
;
	.dbg	line, "BufferMT.c", 13
L08A3:	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP)
	sta     ptr1+1
	ldy     #<(_C_MAP)
L08A6:	lda     (ptr1),y
	sta     _temp
;
; temp3 = MT_color[temp]; // get color, store temp
;
	.dbg	line, "BufferMT.c", 16
	ldy     _temp
	lda     _MT_color,y
	sta     _temp3
;
; temp <<= 2; // x 4
;
	.dbg	line, "BufferMT.c", 18
	lda     _temp
	asl     a
	asl     a
	sta     _temp
;
; BUFFER1[index2] = METATILES[temp]; // get the tl tile
;
	.dbg	line, "BufferMT.c", 20
	lda     #<(_BUFFER1)
	ldx     #>(_BUFFER1)
	clc
	adc     _index2
	bcc     L0491
	inx
L0491:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 21
	inc     _temp
;
; BUFFER2[index2] = METATILES[temp]; // get the tr tile
;
	.dbg	line, "BufferMT.c", 22
	lda     #<(_BUFFER2)
	ldx     #>(_BUFFER2)
	clc
	adc     _index2
	bcc     L0498
	inx
L0498:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 24
	inc     _temp
;
; ++index2;
;
	.dbg	line, "BufferMT.c", 25
	inc     _index2
;
; BUFFER1[index2] = METATILES[temp]; // get the bl tile
;
	.dbg	line, "BufferMT.c", 26
	lda     #<(_BUFFER1)
	ldx     #>(_BUFFER1)
	clc
	adc     _index2
	bcc     L04A0
	inx
L04A0:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 27
	inc     _temp
;
; BUFFER2[index2] = METATILES[temp]; // get the br tile
;
	.dbg	line, "BufferMT.c", 28
	lda     #<(_BUFFER2)
	ldx     #>(_BUFFER2)
	clc
	adc     _index2
	bcc     L04A7
	inx
L04A7:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 30
	inc     _temp
;
; ++index2;
;
	.dbg	line, "BufferMT.c", 31
	inc     _index2
;
; ++index; // next round, difference is attribute table stuff
;
	.dbg	line, "BufferMT.c", 33
	inc     _index
;
; if (Nametable_Plus == 0){ // read from 2nd map
;
	.dbg	line, "BufferMT.c", 35
	ldx     #$00
	lda     _Nametable_Plus
	bne     L08A4
;
; temp = C_MAP2[(Horiz_scroll_Plus>>4) + (index<<4)]; // get the metatile
;
	.dbg	line, "BufferMT.c", 36
	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP2)
	sta     ptr1+1
	ldy     #<(_C_MAP2)
;
; else{
;
	.dbg	line, "BufferMT.c", 38
	jmp     L08A7
;
; temp = C_MAP[(Horiz_scroll_Plus>>4) + (index<<4)]; // get the metatile
;
	.dbg	line, "BufferMT.c", 39
L08A4:	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP)
	sta     ptr1+1
	ldy     #<(_C_MAP)
L08A7:	lda     (ptr1),y
	sta     _temp
;
; temp3 += (MT_color[temp] << 4); // get color, store temp
;
	.dbg	line, "BufferMT.c", 42
	ldy     _temp
	lda     _MT_color,y
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     _temp3
	sta     _temp3
;
; BUFFER5[index3] = temp3;
;
	.dbg	line, "BufferMT.c", 43
	ldy     _index3
	lda     _temp3
	sta     _BUFFER5,y
;
; temp <<= 2; // x 4
;
	.dbg	line, "BufferMT.c", 45
	lda     _temp
	asl     a
	asl     a
	sta     _temp
;
; BUFFER1[index2] = METATILES[temp]; // get the tl tile
;
	.dbg	line, "BufferMT.c", 47
	lda     #<(_BUFFER1)
	ldx     #>(_BUFFER1)
	clc
	adc     _index2
	bcc     L04C8
	inx
L04C8:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 48
	inc     _temp
;
; BUFFER2[index2] = METATILES[temp]; // get the tr tile
;
	.dbg	line, "BufferMT.c", 49
	lda     #<(_BUFFER2)
	ldx     #>(_BUFFER2)
	clc
	adc     _index2
	bcc     L04CF
	inx
L04CF:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 51
	inc     _temp
;
; ++index2;
;
	.dbg	line, "BufferMT.c", 52
	inc     _index2
;
; BUFFER1[index2] = METATILES[temp]; // get the bl tile
;
	.dbg	line, "BufferMT.c", 53
	lda     #<(_BUFFER1)
	ldx     #>(_BUFFER1)
	clc
	adc     _index2
	bcc     L04D7
	inx
L04D7:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 54
	inc     _temp
;
; BUFFER2[index2] = METATILES[temp]; // get the br tile
;
	.dbg	line, "BufferMT.c", 55
	lda     #<(_BUFFER2)
	ldx     #>(_BUFFER2)
	clc
	adc     _index2
	bcc     L04DE
	inx
L04DE:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index2;
;
	.dbg	line, "BufferMT.c", 57
	inc     _index2
;
; ++index3;
;
	.dbg	line, "BufferMT.c", 58
	inc     _index3
;
; ++index;
;
	.dbg	line, "BufferMT.c", 59
	inc     _index
;
; while (index < 15){ 
;
	.dbg	line, "BufferMT.c", 8
	ldx     #$00
L08A5:	lda     _index
	cmp     #$0F
	jcc     L08A2
;
; }
;
	.dbg	line, "BufferMT.c", 61
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ Buffer_Tiles2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Buffer_Tiles2: near

	.dbg	func, "Buffer_Tiles2", "00", extern, "_Buffer_Tiles2"

.segment	"CODE"

;
; index = 2; // will be skipping the top 2 metatiles, later
;
	.dbg	line, "BufferMT.c", 65
	lda     #$02
	sta     _index
;
; index2 = 0;
;
	.dbg	line, "BufferMT.c", 66
	lda     #$00
	sta     _index2
;
; index3 = 0;
;
	.dbg	line, "BufferMT.c", 67
	tax
	sta     _index3
;
; while (index < 15){
;
	.dbg	line, "BufferMT.c", 68
	jmp     L08AE
;
; if (Nametable_Plus == 0){ // drawing to the opposite screen that we're on
;
	.dbg	line, "BufferMT.c", 69
L08AB:	lda     _Nametable_Plus
	bne     L08AC
;
; temp = C_MAP2[(Horiz_scroll_Plus>>4) + (index<<4)]; // get the mt
;
	.dbg	line, "BufferMT.c", 70
	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP2)
	sta     ptr1+1
	ldy     #<(_C_MAP2)
;
; else{
;
	.dbg	line, "BufferMT.c", 72
	jmp     L08B0
;
; temp = C_MAP[(Horiz_scroll_Plus>>4) + (index<<4)]; // get the mt
;
	.dbg	line, "BufferMT.c", 73
L08AC:	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP)
	sta     ptr1+1
	ldy     #<(_C_MAP)
L08B0:	lda     (ptr1),y
	sta     _temp
;
; temp3 = MT_color[temp]; // get palette #, store temp3
;
	.dbg	line, "BufferMT.c", 76
	ldy     _temp
	lda     _MT_color,y
	sta     _temp3
;
; temp <<= 2; // x 4
;
	.dbg	line, "BufferMT.c", 78
	lda     _temp
	asl     a
	asl     a
	sta     _temp
;
; BUFFER3[index2] = METATILES[temp]; // get the tl tile
;
	.dbg	line, "BufferMT.c", 80
	lda     #<(_BUFFER3)
	ldx     #>(_BUFFER3)
	clc
	adc     _index2
	bcc     L0505
	inx
L0505:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 81
	inc     _temp
;
; BUFFER4[index2] = METATILES[temp]; // get the tr tile
;
	.dbg	line, "BufferMT.c", 82
	lda     #<(_BUFFER4)
	ldx     #>(_BUFFER4)
	clc
	adc     _index2
	bcc     L050C
	inx
L050C:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 84
	inc     _temp
;
; ++index2;
;
	.dbg	line, "BufferMT.c", 85
	inc     _index2
;
; BUFFER3[index2] = METATILES[temp]; // get the bl tile
;
	.dbg	line, "BufferMT.c", 86
	lda     #<(_BUFFER3)
	ldx     #>(_BUFFER3)
	clc
	adc     _index2
	bcc     L0514
	inx
L0514:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 87
	inc     _temp
;
; BUFFER4[index2] = METATILES[temp]; // get the br tile
;
	.dbg	line, "BufferMT.c", 88
	lda     #<(_BUFFER4)
	ldx     #>(_BUFFER4)
	clc
	adc     _index2
	bcc     L051B
	inx
L051B:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 90
	inc     _temp
;
; ++index2;
;
	.dbg	line, "BufferMT.c", 91
	inc     _index2
;
; ++index; // next round, difference is attribute table stuff
;
	.dbg	line, "BufferMT.c", 93
	inc     _index
;
; if (Nametable_Plus == 0){ // read from 2nd map
;
	.dbg	line, "BufferMT.c", 95
	ldx     #$00
	lda     _Nametable_Plus
	bne     L08AD
;
; temp = C_MAP2[(Horiz_scroll_Plus>>4) + (index<<4)]; // get the mt
;
	.dbg	line, "BufferMT.c", 96
	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP2)
	sta     ptr1+1
	ldy     #<(_C_MAP2)
;
; else{
;
	.dbg	line, "BufferMT.c", 98
	jmp     L08B1
;
; temp = C_MAP[(Horiz_scroll_Plus>>4) + (index<<4)]; // get the mt
;
	.dbg	line, "BufferMT.c", 99
L08AD:	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP)
	sta     ptr1+1
	ldy     #<(_C_MAP)
L08B1:	lda     (ptr1),y
	sta     _temp
;
; temp3 += (MT_color[temp] << 4); // get palette #, store temp3
;
	.dbg	line, "BufferMT.c", 102
	ldy     _temp
	lda     _MT_color,y
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     _temp3
	sta     _temp3
;
; BUFFER6[index3] = temp3 << 2;
;
	.dbg	line, "BufferMT.c", 103
	lda     #<(_BUFFER6)
	ldx     #>(_BUFFER6)
	clc
	adc     _index3
	bcc     L0536
	inx
L0536:	sta     ptr1
	stx     ptr1+1
	lda     _temp3
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr1),y
;
; temp <<= 2; // x 4
;
	.dbg	line, "BufferMT.c", 105
	lda     _temp
	asl     a
	asl     a
	sta     _temp
;
; BUFFER3[index2] = METATILES[temp]; // get the tl tile
;
	.dbg	line, "BufferMT.c", 107
	lda     #<(_BUFFER3)
	ldx     #>(_BUFFER3)
	clc
	adc     _index2
	bcc     L053C
	inx
L053C:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 108
	inc     _temp
;
; BUFFER4[index2] = METATILES[temp]; // get the tr tile
;
	.dbg	line, "BufferMT.c", 109
	lda     #<(_BUFFER4)
	ldx     #>(_BUFFER4)
	clc
	adc     _index2
	bcc     L0543
	inx
L0543:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 111
	inc     _temp
;
; ++index2;
;
	.dbg	line, "BufferMT.c", 112
	inc     _index2
;
; BUFFER3[index2] = METATILES[temp]; // get the bl tile
;
	.dbg	line, "BufferMT.c", 113
	lda     #<(_BUFFER3)
	ldx     #>(_BUFFER3)
	clc
	adc     _index2
	bcc     L054B
	inx
L054B:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 114
	inc     _temp
;
; BUFFER4[index2] = METATILES[temp]; // get the br tile
;
	.dbg	line, "BufferMT.c", 115
	lda     #<(_BUFFER4)
	ldx     #>(_BUFFER4)
	clc
	adc     _index2
	bcc     L0552
	inx
L0552:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index2;
;
	.dbg	line, "BufferMT.c", 117
	inc     _index2
;
; ++index3;
;
	.dbg	line, "BufferMT.c", 118
	inc     _index3
;
; ++index;
;
	.dbg	line, "BufferMT.c", 119
	inc     _index
;
; while (index < 15){
;
	.dbg	line, "BufferMT.c", 68
	ldx     #$00
L08AE:	lda     _index
	cmp     #$0F
	jcc     L08AB
;
; for (index=0;index<8;++index){
;
	.dbg	line, "BufferMT.c", 123
	stx     _index
L08AF:	lda     _index
	cmp     #$08
	bcs     L055A
;
; BUFFER7[index] = BUFFER5[index] + BUFFER6[index]; 
;
	.dbg	line, "BufferMT.c", 124
	lda     #<(_BUFFER7)
	ldx     #>(_BUFFER7)
	clc
	adc     _index
	bcc     L0563
	inx
L0563:	sta     sreg
	stx     sreg+1
	ldy     _index
	lda     _BUFFER5,y
	sta     ptr1
	ldy     _index
	lda     _BUFFER6,y
	clc
	adc     ptr1
	ldy     #$00
	sta     (sreg),y
;
; for (index=0;index<8;++index){
;
	.dbg	line, "BufferMT.c", 123
	inc     _index
	jmp     L08AF
;
; }
;
	.dbg	line, "BufferMT.c", 126
L055A:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ TestLabel (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_TestLabel: near

	.dbg	func, "TestLabel", "00", extern, "_TestLabel"

.segment	"CODE"

;
; ++dummy;
;
	.dbg	line, "lesson11.c", 36
	inc     _dummy
;
; }
;
	.dbg	line, "lesson11.c", 37
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; All_Off(); // turn off screen
;
	.dbg	line, "lesson11.c", 40
	jsr     _All_Off
;
; Draw_Background();
;
	.dbg	line, "lesson11.c", 41
	jsr     _Draw_Background
;
; X1 = 0x80; // starting position
;
	.dbg	line, "lesson11.c", 42
	lda     #$80
	sta     _X1
;
; Y1 = 0x70; // middle of screen
;
	.dbg	line, "lesson11.c", 43
	lda     #$70
	sta     _Y1
;
; Set_Sprite_Zero();
;
	.dbg	line, "lesson11.c", 44
	jsr     _Set_Sprite_Zero
;
; PPU_CTRL = 0x90; // rightward increments to PPU
;
	.dbg	line, "lesson11.c", 45
	lda     #$90
	sta     $2000
;
; Load_Palette();
;
	.dbg	line, "lesson11.c", 46
	jsr     _Load_Palette
;
; Load_HUD();
;
	.dbg	line, "lesson11.c", 47
	jsr     _Load_HUD
;
; Reset_Scroll();
;
	.dbg	line, "lesson11.c", 48
	jsr     _Reset_Scroll
;
; Wait_Vblank();
;
	.dbg	line, "lesson11.c", 49
	jsr     _Wait_Vblank
;
; All_On(); // turn on screen
;
	.dbg	line, "lesson11.c", 50
	jsr     _All_On
;
; while (NMI_flag == 0); // wait till NMI
;
	.dbg	line, "lesson11.c", 52
L08B2:	lda     _NMI_flag
	beq     L08B2
;
; if (PPU_flag != 0)
;
	.dbg	line, "lesson11.c", 54
	lda     _PPU_flag
	beq     L08B3
;
; Do_Buffer2();
;
	.dbg	line, "lesson11.c", 55
	jsr     _Do_Buffer2
;
; PPU_CTRL = 0x94;
;
	.dbg	line, "lesson11.c", 56
L08B3:	lda     #$94
	sta     $2000
;
; SCROLL = 0;
;
	.dbg	line, "lesson11.c", 57
	lda     #$00
	sta     $2005
;
; SCROLL = 0;  // resetting scroll position, again
;
	.dbg	line, "lesson11.c", 58
	sta     $2005
;
; if (PPU_flag2 != 0)
;
	.dbg	line, "lesson11.c", 60
	lda     _PPU_flag2
	beq     L08B4
;
; Do_Buffer3();
;
	.dbg	line, "lesson11.c", 61
	jsr     _Do_Buffer3
;
; PPU_CTRL = 0x94;
;
	.dbg	line, "lesson11.c", 62
L08B4:	lda     #$94
	sta     $2000
;
; SCROLL = 0;
;
	.dbg	line, "lesson11.c", 63
	lda     #$00
	sta     $2005
;
; SCROLL = 0;  // resetting scroll position, again
;
	.dbg	line, "lesson11.c", 64
	sta     $2005
;
; Get_Input();
;
	.dbg	line, "lesson11.c", 67
	jsr     _Get_Input
;
; PPU_flag = 0;
;
	.dbg	line, "lesson11.c", 68
	lda     #$00
	sta     _PPU_flag
;
; PPU_flag2 = 0;
;
	.dbg	line, "lesson11.c", 69
	sta     _PPU_flag2
;
; if ((joypad1 & START) != 0){
;
	.dbg	line, "lesson11.c", 71
	lda     _joypad1
	and     #$10
	beq     L05A0
;
; SPRITE_ZERO[1] = 0xff; // switch tiles to a very small one
;
	.dbg	line, "lesson11.c", 72
	lda     #$FF
	sta     _SPRITE_ZERO+1
;
; SPRITE_ZERO[2] = 0x20; // attributes = behind the bg
;
	.dbg	line, "lesson11.c", 73
	lda     #$20
	sta     _SPRITE_ZERO+2
;
; Sprite_Zero();
;
	.dbg	line, "lesson11.c", 77
L05A0:	jsr     _Sprite_Zero
;
; SCROLL = Horiz_scroll;
;
	.dbg	line, "lesson11.c", 79
	lda     _Horiz_scroll
	sta     $2005
;
; SCROLL = 0;  // setting the new scroll position
;
	.dbg	line, "lesson11.c", 80
	lda     #$00
	sta     $2005
;
; PPU_CTRL = (0x94 + Nametable);
;
	.dbg	line, "lesson11.c", 81
	lda     _Nametable
	clc
	adc     #$94
	sta     $2000
;
; move_logic();
;
	.dbg	line, "lesson11.c", 83
	jsr     _move_logic
;
; update_Sprites();
;
	.dbg	line, "lesson11.c", 84
	jsr     _update_Sprites
;
; RoomPlus = Room;   // make a copy of variables, but 20 pixels right
;
	.dbg	line, "lesson11.c", 89
	lda     _Room
	sta     _RoomPlus
;
; Nametable_Plus = Nametable;
;
	.dbg	line, "lesson11.c", 90
	lda     _Nametable
	sta     _Nametable_Plus
;
; Horiz_scroll_Plus = Horiz_scroll + 0x20;
;
	.dbg	line, "lesson11.c", 91
	lda     _Horiz_scroll
	clc
	adc     #$20
	sta     _Horiz_scroll_Plus
;
; if (Horiz_scroll_Plus < 0x20){
;
	.dbg	line, "lesson11.c", 92
	cmp     #$20
	bcs     L08B5
;
; ++RoomPlus;
;
	.dbg	line, "lesson11.c", 93
	inc     _RoomPlus
;
; ++Nametable_Plus;
;
	.dbg	line, "lesson11.c", 94
	inc     _Nametable_Plus
;
; RoomPlus &= 3;
;
	.dbg	line, "lesson11.c", 95
	lda     _RoomPlus
	and     #$03
	sta     _RoomPlus
;
; Nametable_Plus &= 1;
;
	.dbg	line, "lesson11.c", 96
	lda     _Nametable_Plus
	and     #$01
	sta     _Nametable_Plus
;
; ++TEST; // for debugging
;
	.dbg	line, "lesson11.c", 99
L08B5:	inc     $00FF
;
; if ((Horiz_scroll_Plus & 0x1e)==0)
;
	.dbg	line, "lesson11.c", 100
	lda     _Horiz_scroll_Plus
	and     #$1E
	bne     L08B6
;
; New_Room(); // 6245 cycles
;
	.dbg	line, "lesson11.c", 101
	jsr     _New_Room
;
; ++TEST; // for debugging
;
	.dbg	line, "lesson11.c", 103
L08B6:	inc     $00FF
;
; Should_We_Buffer(); // 4422 cycles
;
	.dbg	line, "lesson11.c", 104
	jsr     _Should_We_Buffer
;
; ++TEST; // for debugging
;
	.dbg	line, "lesson11.c", 105
	inc     $00FF
;
; for(temp = 0; temp < 8; temp++){ // just wait a bit, at least 1 scanline
;
	.dbg	line, "lesson11.c", 110
	lda     #$00
L08B9:	sta     _temp
	cmp     #$08
	bcs     L08B8
;
; ++dummy;
;
	.dbg	line, "lesson11.c", 111
	inc     _dummy
;
; for(temp = 0; temp < 8; temp++){ // just wait a bit, at least 1 scanline
;
	.dbg	line, "lesson11.c", 110
	lda     _temp
	clc
	adc     #$01
	jmp     L08B9
;
; NMI_flag = 0;
;
	.dbg	line, "lesson11.c", 115
L08B8:	lda     #$00
	sta     _NMI_flag
;
; while (1){ // infinite loop
;
	.dbg	line, "lesson11.c", 51
	jmp     L08B2
	.dbg	line

.endproc

